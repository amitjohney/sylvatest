---

# Retrieve alerts from Thanos


#### To be mutualized with login-tests

.test_scripts:
  edit_hosts_file:
    - domain=$(kubectl --kubeconfig management-cluster-kubeconfig get secret sylva-units-values -oyaml | yq '.data.values | @base64d' | yq '.cluster_domain')
    - |
      echo $domain
      if [[ $domain == "sylva" ]]; then
        echo "-- Get ingress saved into /etc/hosts"
        access_ip=$(kubectl --kubeconfig management-cluster-kubeconfig -n sylva-system get secrets/sylva-units-values -o jsonpath='{.data.values}' | base64 -d | yq -r .display_external_ip)
        for i in $(kubectl --kubeconfig management-cluster-kubeconfig get ingress -A -o custom-columns=:.spec.tls[].hosts[] | grep -v "<none>"); do
          echo $access_ip $i >> /etc/hosts
        done
      fi

.thanos-alert-check:
  stage: deployment-test
  extends:
    - .test-tags
  script:
    - pip install jtbl --break-system-packages
    - !reference [.import_functions]
    - download_artifact deploy-management-cluster management-cluster-kubeconfig
    - !reference [.test_scripts, edit_hosts_file]
    - |
      if kubectl --kubeconfig management-cluster-kubeconfig get ns thanos &>/dev/null; then
        thanos_url=$(kubectl --kubeconfig management-cluster-kubeconfig get ingress -n thanos thanos-query -o jsonpath='{ .spec.tls[].hosts[] }')
        echo "Thanos URL - $thanos_url"
        thanos_token=$(kubectl --kubeconfig management-cluster-kubeconfig get secrets sylva-units-values -o yaml | yq .data.values | base64 -d | yq ._internal.thanos_password)
        unset https_proxy http_proxy
        echo "Checking Thanos alerts"
        curl -k -s -G https://$thanos_url:443/api/v1/query -u thanos-user:$thanos_token \
        --data-urlencode "$ALERT_QUERY" | tee thanos-alert-$CLUSTER.log
        curl -k -s -G https://$thanos_url:443/api/v1/query -u thanos-user:$thanos_token \
        --data-urlencode "$ALERT_QUERY" | jq -c .data.result[].metric | jtbl | tee thanos-alert-$CLUSTER.log
      else
        echo "Thanos unit is not enable - SKIPPING"
      fi
  variables:
    ALERT_QUERY: "query=ALERTS{alertstate=\"firing\", cluster=\"$CLUSTER\"}"
  artifacts:
    expire_in: 48 hour
    when: always
    paths:
      - thanos-alert-$CLUSTER.log

alert-check:management:
  extends:
    .thanos-alert-check
  variables:
    CLUSTER: $MANAGEMENT_CLUSTER_NAME

#alert-check:workload:
#  extends:
#    .thanos-alert-check
#  variables:
#    CLUSTER: $WORKLOAD_CLUSTER_NAME
