---
include:
  - local: .gitlab/ci/deployment-pipeline.yml

# Default tag will be used for all deployments/updates jobs
default:
  tags:
    - $CI_PIPELINE_IID
    - equinix
    - shell

# test-tags will be used to run the tests jobs in a docker executor based runner
.test-tags:
  tags:
    - $CI_PIPELINE_IID
    - equinix
    - docker

#----------------------------------------------------------

create-runner:
  stage: deploy
  timeout: 15min
  id_tokens:
    JOB_ID_TOKEN:
      aud: runner-aas
  variables:
    REQUEST: create
    RUNNER_HOSTNAME: syla-core-$CI_PIPELINE_ID
    RUNNER_TAG: $CI_PIPELINE_IID
    RUNNER_PROJECT_ID: $CI_PROJECT_ID
    RUNNER_PLAN: m3.small.x86
    # RUNNER_AAS_TARGET_REF: main
    RUNNER_AAS_TARGET_REF: test
  tags: []
  image:
    name: registry.gitlab.com/gitlab-org/cli:v1.40.0
    entrypoint: [""]
  script:
    - glab config set -g check_update false
    - >
      glab ci run-trig
      --token="$RUNNER_AAS_TOKEN"
      --branch "main"
      --variables "TARGET_REF:$RUNNER_AAS_TARGET_REF"
      --variables "REQUEST:$REQUEST"
      --variables "SOURCE_JWT_TOKEN:$JOB_ID_TOKEN"
      --variables "RUNNER_PLAN:$RUNNER_PLAN"
      --repo "sylva-projects/sylva-elements/ci-tooling/runner-aas-interface" | tee pipeline.json
    - 'PIPELINE_ID=$(grep -Eo "id: \d+" pipeline.json | grep -Eo "\d+")'
    - >
      while true; do
        PIPELINE=$(glab api projects/sylva-projects%2Fsylva-elements%2Fci-tooling%2Frunner-aas-interface/pipelines/$PIPELINE_ID)
        PIPELINE_STATUS=$(echo $PIPELINE | python3 -c 'import json,sys;print(json.load(sys.stdin)["status"])')
        echo "PIPELINE_STATUS = $PIPELINE_STATUS"
        [[ $PIPELINE_STATUS == "" ]] && exit 1
        [[ $PIPELINE_STATUS == "failed" ]] && exit 1
        [[ $PIPELINE_STATUS == "success" ]] && break
        sleep 5
      done

clean-runner:
  stage: cleanup
  extends: create-runner
  dependencies: []
  variables:
    REQUEST: delete
  when: always
