---
include:
  - local: .gitlab/ci/deployment-pipeline.yml

# Default tag will be used for all deployments/updates jobs
default:
  tags:
    - $CAPO_PLATFORM_TAG

# test-tags will be used to run the tests jobs in a docker executor based runner
.test-tags:
  tags:
    - $CAPO_PLATFORM_TAG

# This configuration is specific to capo deployments
.flavored-pre-deployment-configuration:
  - echo -e "\e[1m\e[0Ksection_start:`date +%s`:gitlab_ci_capo[collapsed=true]\r\e[0KApplying specific capo configuration\e[0m"
  - !reference [.os_cloud]
  - |
    if [[ ${CLUSTER_TYPE} == 'management' ]]; then
      yq -i eval-all 'select(fileIndex==0).cluster.capo.clouds_yaml = select(fileIndex==1) | select(fileIndex==0)' $ENV_PATH/secrets.yaml ~/.config/openstack/clouds.yml
    fi
    yq -i '.cluster.capo.resources_tag = strenv(CAPO_TAG)' $values_file
    # The PRIVATE variables below are set in the gitlab runner configuration
    # and allow to enable extra values needed in the context of the platform on which this test actually runs
    PRIVATE_RUNNER_CONTEXT=falcon   # Temporary: to be set at runner level
    echo "Applying private $PRIVATE_RUNNER_CONTEXT values"
    PRIVATE_RUNNER_VALUES_PATH=${CI_PROJECT_DIR}/environment-values/ci/private/${PRIVATE_RUNNER_CONTEXT}-base
    # decypher falcon secret and apply them with values into extra kustomize component
    sops -d ${PRIVATE_RUNNER_VALUES_PATH}/secrets.enc.yaml > ${PRIVATE_RUNNER_VALUES_PATH}/secrets.yaml
    export EXTRA_COMPONENT="$(realpath ${PRIVATE_RUNNER_VALUES_PATH} --relative-to $ENV_PATH)"
    echo EXTRA_COMPONENT=$EXTRA_COMPONENT
    if [ $(yq '.components | length' $ENV_PATH/kustomization.yaml) -eq "0" ]; then yq -i '.components = []' $ENV_PATH/kustomization.yaml; fi
    yq -i '.components += strenv(EXTRA_COMPONENT)' $ENV_PATH/kustomization.yaml
    if [[ ${CLUSTER_TYPE} == 'workload' ]]; then
      yq -i '.namespace = "WORKLOAD_CLUSTER_NAMESPACE"' $ENV_PATH/kustomization.yaml
    fi
    echo -e "\e[0Ksection_end:`date +%s`:gitlab_ci_capo\r\e[0K"

.cleanup-openstack:
  stage: cleanup
  dependencies: []
  image:
    name: $OPENSTACK_CLIENT_IMAGE
  script:
    - !reference [.os_cloud]
    - !reference [.import_functions]
    - download_artifact deploy-management-cluster management-cluster-kubeconfig
    - echo -e "\e[1m\e[0Ksection_start:`date +%s`:capo_cleanup[collapsed=true]\r\e[0KRunning capo cleanup\e[0m"
    - |
      if [[ ${DELAY_CAPO_CLEANUP} == 'true' ]]; then
        echo "This MR was flagged with delay-capo-ci-cleanup-on-failure label. The CAPO cleanup will be delayed for 12h."
        for ns in sylva-system $ENV_NAME; do
          # Try to suspend the capo-cluster-resources kustomiozation or the operator will remove the tag during the next reconciliation
          kubectl --kubeconfig management-cluster-kubeconfig -n $ns patch Kustomization capo-cluster-resources --type=merge -p '{"spec":{"suspend":true}}' || true
          kubectl --kubeconfig management-cluster-kubeconfig -n $ns delete secret cluster-cloud-config || true
        done
        openstack stack list --insecure --tags ${CAPO_TAG} -f value -c ID | xargs -tr openstack stack update --insecure --existing --tag ${CAPO_TAG},please-delay-cleanup
      else
        ./tools/openstack-cleanup.sh capo_cloud "${CAPO_TAG}"
      fi
    - echo -e "\e[0Ksection_end:`date +%s`:capo_cleanup\r\e[0K"

deployment-success:cleanup:
  extends: .cleanup-openstack
  rules:
    - when: on_success

deployment-failure:cleanup:
  extends: .cleanup-openstack
  before_script:
    - |
      if [[ ${CI_MERGE_REQUEST_LABELS} =~ "delay-capo-ci-cleanup-on-failure" ]]; then
        DELAY_CAPO_CLEANUP="true"
      fi
  rules:
    - when: on_failure
