---
# =============================
# Templates for deployments
# =============================

include:
  - local: .gitlab/ci/common.yml


.function_change_git_revision:
  # Function to change the git revision used during the deployment
  - |
    function change_git_revision() {
      echo "GIT_REVISION: $GIT_REVISION"
        if git ls-remote --exit-code --tags https://gitlab.com/sylva-projects/sylva-core.git "${GIT_REVISION}" > /dev/null; then
          echo "Provided GIT_REVISION: $GIT_REVISION is a known upstream tag. Using it as it"
          git fetch origin tag ${GIT_REVISION}
          if [ -n "${OCI_TAG}" ] ; then
            OCI_TAG=${GIT_REVISION}
          fi
        elif git ls-remote --exit-code --heads https://gitlab.com/sylva-projects/sylva-core.git "${GIT_REVISION}" > /dev/null; then
          echo "Provided GIT_REVISION: $GIT_REVISION is a known upstream branch. It will be used as reference for fetching sylva-core code"
          GIT_REVISION=$(git ls-remote --exit-code --heads https://gitlab.com/sylva-projects/sylva-core.git "${GIT_REVISION}" | cut -f 1)
          SHORT_ID=$(echo $GIT_REVISION | head -c 8)
          if [ -n "${OCI_TAG}" ] ; then
            OCI_TAG=0.0.0-git-$SHORT_ID
          fi
        else
          echo "Provided GIT_REVISION: $GIT_REVISION, will try to use it as a commit id"
          SHORT_ID=$(echo $GIT_REVISION | head -c 8)
          if [ -n "${OCI_TAG}" ] ; then
            OCI_TAG=0.0.0-git-$SHORT_ID
          fi
        fi
      if [ -n "${OCI_TAG}" ] ; then
        echo "Sylva-units chart will use: $OCI_TAG reference"
        echo "Checking if oci://registry.gitlab.com/sylva-projects/sylva-core/sylva-units:$OCI_TAG exist"
        if helm pull oci://registry.gitlab.com/sylva-projects/sylva-core/sylva-units --version $OCI_TAG -d /tmp > /dev/null; then
          echo "oci://registry.gitlab.com/sylva-projects/sylva-core/sylva-units:$OCI_TAG was sucessfully pulled"
        else
          echo "Failed to retrieve: oci://registry.gitlab.com/sylva-projects/sylva-core/sylva-units:$OCI_TAG"
          echo "Ensure you are targeting a branch with an open MR and check if that OCI artifact was not removed by cleanup job"
        fi
      fi
      git fetch origin $GIT_REVISION
      echo -e "Changing git revision to use \\e[1;94m$1\\e[0m"
      git checkout $GIT_REVISION
      git status
      # This is required as old version of Sylva rely on $CI_COMMIT_SHA to determine the ref to use for flux
      export CI_COMMIT_SHA=$(git rev-parse HEAD)
      echo -e "Current revision: $(git rev-parse HEAD)"
    }

.function_update_values_file:
  # Common function to update the deployment values file with the content of multiple yaml files
  - |
    function update_values_file() {
    echo -e "Applying values from \\e[1;94m$@\\e[0m to \\e[1;92m$values_file\\e[0m"
    yq -i eval-all '. as $item ireduce ({}; . * $item )' $values_file $@
    echo "Content of $values_file:"
    cat $values_file
    }

.function_download_artifact:
  - |
    function download_artifact() {
    export job_name=$1
    artifact_name=$2
    if [[ $CI_JOB_NAME != $job_name ]]; then
      JOB_ID=$(curl --location -f --header "JOB-TOKEN: $CI_JOB_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs" | yq '.[] | select(.name == env(job_name)) | .id')
      echo -e "Retrieving \\e[1;94m$artifact_name\\e[0m artifact from \\e[1;92m$job_name\\e[0m job"
      curl --location -o $artifact_name --header "JOB-TOKEN: $CI_JOB_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/$JOB_ID/artifacts/$artifact_name"
    fi
    }

.import_functions:
  - !reference [.function_change_git_revision]
  - !reference [.function_update_values_file]
  - !reference [.function_download_artifact]

.setup_ci_values:
  - echo -e "\e[1m\e[0Ksection_start:`date +%s`:gitlab_ci_common[collapsed=true]\r\e[0KRunning common deployment steps\e[0m"
  - !reference [.import_functions]
  - download_artifact deploy-management-cluster management-cluster-kubeconfig
  - |
    if [ -n "${GIT_REVISION}" ] ; then
      change_git_revision $GIT_REVISION
    else
      echo -e "Current revision: $(git rev-parse HEAD)"
    fi
  - |
    if [[ ${CLUSTER_TYPE} == 'workload' ]]; then
        ENV_SUB_PATH="environment-values/workload-clusters"
        export OCI_COMPONENT_PATH="../../components/workload-cluster-oci-artifacts"
        export CLUSTER_CI_NAME=${WORKLOAD_CLUSTER_NAME}
    else
        ENV_SUB_PATH="environment-values"
        export OCI_COMPONENT_PATH="../components/oci-artifacts"
        export CLUSTER_CI_NAME=${MANAGEMENT_CLUSTER_NAME}
    fi
  - export ENV_PATH=${ENV_SUB_PATH}/${ENV_NAME}
  - values_file=$ENV_PATH/values.yaml
  - |
    if [ -n "$DOCKER_HOST" ]; then
      docker network create --attachable kind
      export DOCKER_IP=$(getent ahostsv4 docker | awk '{print $1}' | sort -u)
      KIND_PREFIX=$(docker network inspect kind -f '{{ (index .IPAM.Config 0).Subnet }}')
      ip route add $KIND_PREFIX via $DOCKER_IP
    fi
  - |
    if [ ${OCI_TAG} ]; then
      echo -e "Applying OCI configuration for tag: ${OCI_TAG}"
      if [ $(yq '.components | length' $ENV_PATH/kustomization.yaml) -eq "0" ]; then
        yq -i '.components = []' $ENV_PATH/kustomization.yaml
      fi
      yq -i '.components += strenv(OCI_COMPONENT_PATH)' $ENV_PATH/kustomization.yaml
    cat <<EOF>> $ENV_PATH/kustomization.yaml
    patches:
    - target:
        kind: HelmRelease
        name: sylva-units
      patch: |
        - op: replace
          path: /spec/chart/spec/version
          value: ${OCI_TAG}
    EOF
      cat $ENV_PATH/kustomization.yaml
    fi
  - yq -i '.cluster.name = strenv(CLUSTER_CI_NAME)' $values_file
  - yq -i '.env_type = "ci"' $values_file
  - |
    if [ -n "${MGMT_ADDITIONAL_VALUES}" ] && [ "${CLUSTER_TYPE}" = "management" ]; then
      update_values_file ${MGMT_ADDITIONAL_VALUES}
    fi
  - |
    if [ -n "${WC_ADDITIONAL_VALUES}" ] && [ "${CLUSTER_TYPE}" = "workload" ]; then
      update_values_file ${WC_ADDITIONAL_VALUES}
    fi
  - |
    if [ -n "${REMOTE_VALUES}" ]; then
      echo -e "This pipeline is a cross project pipeline."
      echo "${REMOTE_VALUES}" > /tmp/remote_values.yaml
      update_values_file /tmp/remote_values.yaml
    fi
  - echo -e "\e[0Ksection_end:`date +%s`:gitlab_ci_common\r\e[0K"
  - !reference [.flavored-pre-deployment-configuration]
  - echo -e "\e[1m\e[0Ksection_start:`date +%s`:gitlab_ci_update_values[collapsed=true]\r\e[0KApply specific values\e[0m"
  - |
    if [ -n "${SPECIFIC_VALUES_FILE}" ]; then
      update_values_file $SPECIFIC_VALUES_FILE
    else
      echo -e "No specific values to apply"
    fi
  - echo -e "\e[0Ksection_end:`date +%s`:gitlab_ci_update_values\r\e[0K"

# By default we don't have specific configuration to apply
.flavored-pre-deployment-configuration:
  - []

.os_cloud:
  # the OS_* variables below are set in the gitlab runner configuration
  # and contain information to connect to the OpenStack instance used
  # by this test
  - mkdir -p ~/.config/openstack
  - |
    cat <<EOF>> ~/.config/openstack/clouds.yml
    clouds:
      capo_cloud:
        auth:
          auth_url: '${OS_AUTH_URL}'
          user_domain_name: '${OS_USER_DOMAIN_ID}'
          project_domain_name: '${OS_PROJECT_DOMAIN_ID}'
          project_name: '${OS_TENANT_NAME}'
          username: '${OS_USERNAME}'
          password: '${OS_PASSWORD}'
        region_name: '${OS_REGION_NAME}'
        verify: false
    EOF

.management-base:
  extends: .docker-service
  variables:
    CLUSTER_TYPE: management
  timeout: 60min
  stage: deploy
  artifacts:
    expire_in: 48 hour
    when: always
    paths:
      - debug-on-exit.log
      - bootstrap-cluster-dump/
      - management-cluster-dump/
      - bootstrap-cluster-units-report.xml
      - management-cluster-units-report.xml
      - "*-timeline.html"
      - management-cluster-kubeconfig
    reports:
      junit:
      - bootstrap-cluster-units-report.xml
      - management-cluster-units-report.xml
    # expose_as: $CI_JOB_NAME  # not allowed https://gitlab.com/gitlab-org/gitlab/-/issues/427149

.deploy-management:
  extends: .management-base
  script:
    - !reference [.setup_ci_values]
    - ./bootstrap.sh environment-values/${ENV_NAME}
  variables:
    SPECIFIC_VALUES_FILE: $MGMT_INITIAL_ADDITIONAL_VALUES
    GIT_REVISION: $MGMT_INITIAL_REVISION

.update-management:
  extends: .management-base
  script:
    - !reference [.setup_ci_values]
    - ./apply.sh environment-values/${ENV_NAME}
  variables:
    SPECIFIC_VALUES_FILE: $MGMT_UPDATE_ADDITIONAL_VALUES
    GIT_REVISION: $MGMT_UPDATE_REVISION

.workload-base:
  extends: .docker-service
  variables:
    CLUSTER_TYPE: workload
  timeout: 60min
  stage: deploy
  artifacts:
    expire_in: 48 hour
    when: always
    paths:
      - debug-on-exit.log
      - management-cluster-dump/
      - workload-cluster-dump/
      - management-cluster-units-report.xml
      - "*-timeline.html"
      - management-cluster-kubeconfig
    reports:
      junit:
      - management-cluster-units-report.xml

.deploy-workload:
  extends: .workload-base
  script:
    - !reference [.setup_ci_values]
    - ./apply-workload-cluster.sh environment-values/workload-clusters/${ENV_NAME}
  variables:
    SPECIFIC_VALUES_FILE: $WC_INITIAL_ADDITIONAL_VALUES
    GIT_REVISION: $WC_INITIAL_REVISION

.update-workload:
  extends: .workload-base
  script:
    - !reference [.setup_ci_values]
    - ./apply-workload-cluster.sh environment-values/workload-clusters/${ENV_NAME}
  variables:
    SPECIFIC_VALUES_FILE: $WC_UPDATE_ADDITIONAL_VALUES
    GIT_REVISION: $WC_UPDATE_REVISION

.delete-workload:
  extends: .workload-base
  stage: delete
  script:
    - !reference [.function_download_artifact]
    - download_artifact deploy-management-cluster management-cluster-kubeconfig
    - . bin/env
    - kubectl --kubeconfig management-cluster-kubeconfig delete -n ${ENV_NAME} hr sylva-units --timeout 30m || true
    - kubectl --kubeconfig management-cluster-kubeconfig delete ns ${ENV_NAME} --timeout 2m || true
    - ./tools/shell-lib/debug-on-exit.sh
    - |
      if kubectl --kubeconfig management-cluster-kubeconfig get ns ${ENV_NAME} &>/dev/null; then
        echo "Workload cluster namespace was not deleted in time"
        exit 1
      fi
