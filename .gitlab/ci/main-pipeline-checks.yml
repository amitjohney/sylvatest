---
# ==========================================
# Test stage
# ==========================================

.lint-base:
  stage: test
  needs: []
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'

# ==========================================
# sylva-units chart lint
# ==========================================

.helm-lint:
  extends: .lint-base
  before_script:
    - chart_dir=charts/${HELM_NAME}
    # we replace 'helm' by a wrapper ignoring the warnings about symlinks
    - |
      function helm() { $(which helm) $@ 2> >(grep -v 'found symbolic link' >&2); }
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' ||  $CI_PIPELINE_SOURCE == 'pipeline'
      changes:
        - charts/sylva-units/**/*
        - .gitlab/ci/**/*
  needs:
    - job: 'sylva-units:helm-schema-validation'
      optional: true

sylva-units:helm-lint:
  stage: test
  extends: .helm-lint
  script:
    - helm lint charts/sylva-units

sylva-units:helm-yamllint:
  stage: test
  extends: .helm-lint
  script:
    - yamllint charts/sylva-units -d "$(cat < .gitlab/ci/configuration/yamllint.yaml) $(cat < .gitlab/ci/configuration/yamllint-helm-exclude-chart-templates.yaml)"

sylva-units:helm-template-yamllint:
  stage: test
  extends: .helm-lint
  script:
    - ./tools/validation/helm-template-yamllint.sh
  variables:
    HELM_NAME: sylva-units

sylva-units:helm-schema-validation:
  stage: test
  extends: .helm-lint
  script:
    - ./tools/validation/helm-schema-validation.sh
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' ||  $CI_PIPELINE_SOURCE == 'pipeline'
      exists:
        - charts/sylva-units/values.schema.yaml
        - charts/sylva-units/values.schema.json
      changes:
        - .gitlab/ci/**/*
        - charts/sylva-units/values.schema.json
        - charts/sylva-units/values.schema.yaml
        - charts/sylva-units/values.yaml
        - tools/generate_json_schema.py
  variables:
    HELM_NAME: sylva-units

# ==========================================
# kustomize-units & environment-values lint
# ==========================================

kustomize-lint:
  extends: .lint-base
  script:
    - |
      count=0
      for kustomization in $(find environment-values kustomize-units -type f -name 'kustomization.yaml' | grep -v '/ci/private/' | sed -r 's|/[^/]+$||'); do
        if yq -e '.kind=="Component"' ${kustomization}/kustomization.yaml 2>stderr 1>/dev/null; then
          continue # Skip components as they may not be buildable
        fi
        echo -e "\e[1m\e[0Ksection_start:`date +%s`:$count[collapsed=true]\r\e[0KRun kubectl kustomize for $kustomization\e[0m"
        if kubectl kustomize $kustomization 2>stderr 1>/dev/null; then
          echo "kubectl kustomize suceed for $kustomization"
        else
          echo "kubectl kustomize failed for $kustomization with the following error:" >> error_log
          cat stderr >> error_log
          echo >> error_log
        fi
        echo -e "\e[0Ksection_end:`date +%s`:$count\r\e[0K"
        count=$(( count +1 ))
      done

      if [[ -f error_log ]]; then
        printf '\n\e[31m\e[1m%-80s\e[0m\n' ""
        printf '\e[31m\e[1m%0.1s\e[0m' "-"{1..80}
        printf '\n\e[31m\e[1m|%-78s|\e[0m\n' "Some kustomizations failed to process"
        printf '\e[31m\e[1m%0.1s\e[0m' "-"{1..80}
        printf '\n\e[31m\e[1m%-80s\e[0m\n' ""
        cat error_log
        exit 1
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' ||  $CI_PIPELINE_SOURCE == 'pipeline'
      changes:
        - .gitlab/ci/**/*
        - environment-values/**/*
        - kustomize-units/**/*

# ==========================================
# Generic lint
# ==========================================

yamllint:
  extends: .lint-base
  script:
    - 'yamllint . -d "$(cat < .gitlab/ci/configuration/yamllint.yaml) $(cat < .gitlab/ci/configuration/yamllint-helm-exclude-charts.yaml)"'

shellcheck:
  extends: .lint-base
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shellcheck

avoid-typo-on-bootstrap:
  extends: .lint-base
  script:
    - |
      rm -rf .git  # because busybox grep does not support --exclude-dir
      echo "Check against frequent typos on 'bootstrap'..."
      set +e
      typos=$(grep -rnsiE 'boostrap|bootrap|bootsrap' . | grep -v '.gitlab-ci.yaml:      typos=')
      set -e
      if [ -n "$typos" ]; then
        echo "A few typos were found on the 'bootstrap' word:"
        echo "-----------------"
        echo "$typos"
        echo "-----------------"
        exit 1
      fi

check-docs-markdown:
  extends: .lint-base
  image: registry.gitlab.com/gitlab-org/gitlab-docs/lint-markdown:alpine-3.16-vale-2.20.2-markdownlint-0.32.2-markdownlint2-0.5.1
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - |
      md_files=$(git diff --name-only $CI_COMMIT_SHA origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME | grep "\.md$" || true)
      if [ -n "$md_files" ] ; then
        markdownlint-cli2-config .gitlab/ci/configuration/.markdownlint.yml $md_files
      else
        echo "No modified .md files"
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - "**/*.md"


check-sylva-toolbox-binaries-versions:
  extends: [.lint-base, .docker-service]
  script:
    - eval $(grep '^SYLVA_' tools/shell-lib/common.sh)
    - mkdir bin
    - echo docker run --rm ${SYLVA_TOOLBOX_REGISTRY}/${SYLVA_TOOLBOX_IMAGE}:${SYLVA_TOOLBOX_VERSION}
    - docker run --rm ${SYLVA_TOOLBOX_REGISTRY}/${SYLVA_TOOLBOX_IMAGE}:${SYLVA_TOOLBOX_VERSION} | tar xz -C bin
  # this job checks that the different versions of binaries that we use are aligned:
  # - flux binary in sylva-toolbox
  # - flux kustomization (kustomize-units/flux-system)
  # - capi kustomization (kustomize-units/capi)
  # - clusterctl version in sylva-toolbox
    - flux_binary_version=$(bin/flux version --client -o yaml | yq .flux)
    - kustomization_version=$(yq '.resources[0] | capture("/(?P<version>v[^/]+)/") | .version' kustomize-units/flux-system/base/kustomization.yaml)
    - |
      if [[ $flux_binary_version != $kustomization_version ]]; then
        echo
        echo "Flux version mismatch between the 'flux' binary provided in sylva-toolbox and the Flux version used in kustomize-units/flux-system"
        echo "- flux binary has version $flux_binary_version"
        echo "- flux kustomization has  $kustomization_version"
        echo
        exit_code=1
      fi
    - exit ${exit_code:-0}

clusterctl-check-versions:
   # this job checks that the versions of clusterctl and capi that we use are aligned:
   # - capi kustomization (kustomize-units/capi)
   # - clusterctl version in kube-job image
  extends: [.lint-base, .docker-service]
  script:
    - capi_version=$(yq '.resources[0] | capture("/(?P<version>v[^/]+)/") | .version' kustomize-units/capi/kustomization.yaml)
    - clusterctl_kubejob_version=$(docker run --rm $(yq eval 'select(documentIndex==1).spec.template.spec.containers[0].image' kustomize-units/kube-job/job.yaml) sh -c 'clusterctl version | grep -o "GitVersion:\"[^\"]*" | cut -d"\"" -f2')
    - |
      if [[ $capi_version != $clusterctl_kubejob_version ]]; then
        echo
        echo "Version mismatch between the 'capi' version used in kustomize-units/capi and the 'clusterctl' version used in kube-job image"
        echo "- capi kustomization has version $capi_version"
        echo "- clustertctl version in kube-job image has version  $clusterctl_kubejob_version"
        exit -1
        echo
      fi

check_unit_documentation:
  # this job verifie that units documentation has been updated
  extends: [.lint-base]
  script:
    - ./tools/generate_units_documentation.py check
