---
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'pipeline'  #  this is required to prevent that default workflow blocks the pipeline creation
    - if: $CI_PIPELINE_SOURCE == 'schedule' # Allow scheduled pipeline on dev branch with open MR
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'  # prevent branch pipeline when an MR is open (prefer MR pipeline)
      when: never
    - if: $CI_COMMIT_TAG
      variables:
        OCI_TAG_FORMAT: "$CI_COMMIT_TAG"
    - when: always

stages:
  - test
  - build
  - deploy
  - delete
  - gitleaks
  - report

default:
  tags:
    - gitlab-org-docker
  image: $CI_IMAGE

variables:
  RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  OCI_TAG_FORMAT: "0.0.0-git-$CI_COMMIT_SHORT_SHA"
  DOCKER_KIND_NETWORK: "172.21.0.0/16"

gitleaks:
  rules:
    - when: never

# Customize gitleak job imported from to-be-continuous in order to checkout main
# (needed for git to be able to retrieve commits from this branch not in main)
gitleaks-custom:
  stage: gitleaks
  extends: gitleaks
  needs: []
  before_script:
    - echo GITLEAKS_ARGS=$GITLEAKS_ARGS
    - !reference [gitleaks, before_script]
  variables:
    GITLEAKS_ARGS: '--verbose --log-opts=origin/main..HEAD'
    GITLEAKS_RULES: .gitleaks.toml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'   # Do not trigger gitleaks for cross-repo pipelines
      when: never
    - if: $CI_BRANCH_NAME == "main"
      variables:
        GITLEAKS_ARGS: '--verbose'    # on main, detect leaks on whole repo
    - when: always
