---
# ==========================================
# Scheduled cleanup
# ==========================================

variables:
  MAX_DEPLOY_CAPO_TIMEOUT: 80

scheduled-cleanup-capo:
  stage: delete
  image:
    name: $OPENSTACK_CLIENT_IMAGE
  script:
    - !reference [.common-deployment, os_cloud]
    - touch tags.txt exclude-tags.txt
    - STACK_TTL=$((($MAX_DEPLOY_CAPO_TIMEOUT+5)*60))
    - |
      echo "Heat Stack TTL: $STACK_TTL"
    - |
      for STACK in $(openstack stack list -f value -c "Stack Name" | grep -E '^(management|workload|capo)-cluster' ); do
        STACK_TIME=$(date -d "$(openstack stack show ${STACK} -c creation_time -f value | tr T ' ' | tr -d Z )" +%s)
        THIS_TIME=$(date +%s)
        # we'll only consider for cleanup tags applied to resources created more than STACK_TTL seconds ago
        if [ $((THIS_TIME-STACK_TIME)) -gt ${STACK_TTL} ]; then
            # and we'll delay the cleanup for tags of stacks where second tag is "please-delay-cleanup"; patched with `openstack stack update --existing --tag sylva-foo.bar,please-delay-cleanup ${STACK}
            if openstack stack show ${STACK} -c tags -f json | jq .tags[] -r | grep -xq "please-delay-cleanup"; then
                # but only for an period of 12 hours after its creation
                if [ $((THIS_TIME-STACK_TIME)) -lt 43200 ]; then
                    echo -e "The cleanup of the $(openstack stack show ${STACK} -c tags -f json | jq .tags[0] -r) tag is delayed for $(((STACK_TIME+43200-THIS_TIME)/60)) minutes"
                    openstack stack show ${STACK} -c tags -f json | jq .tags[0] -r >> exclude-tags.txt
                fi
            fi
            openstack stack show ${STACK} -c tags -f json | jq .tags[] -r >> tags.txt
        else
            openstack stack show ${STACK} -c tags -f json | jq .tags[] -r >> exclude-tags.txt
        fi
      done
    - |
      # skip the cleanup for resources with tags present in exclude-tags.txt
      set +e
      echo "Remaining stacks:" > scheduled_cleanup_status
      for CAPO_TAG in $(comm -3 -2 <(sort tags.txt) <(sort exclude-tags.txt) | sort -u); do
        echo -e "\e[1m\e[0Ksection_start:`date +%s`:scheduled_cleanup[collapsed=true]\r\e[0K\U0001F5D1  Cleaning tag: ${CAPO_TAG} \e[0m"
        if ! ./tools/openstack-cleanup.sh capo_cloud ${CAPO_TAG}; then
          global_cleanup_status=1
          echo "Following stack(s) cleanup failed:" >> scheduled_cleanup_status
          openstack stack list --tags ${CAPO_TAG} >> scheduled_cleanup_status
        fi
        echo -e "\e[0Ksection_end:`date +%s`:scheduled_cleanup\r\e[0K"
      done
      set -e
      cat scheduled_cleanup_status || true
      exit ${global_cleanup_status-0}
  variables:
    OS_CLOUD: "capo_cloud"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_CAPO_CLEANUP'
      when: always
  tags:
    - $CAPO_PLATFORM_TAG
