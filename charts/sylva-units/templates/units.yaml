{{- $envAll := set . "Values" (include "interpret-values-gotpl" . | fromJson) -}}
{{ range $unit_name, $unit_def := .Values.units }}

  {{- if include "unit-enabled" (tuple $envAll $unit_name) -}}
    {{/*********** Prepare labels used in all generated objects */}}

    {{- $labels := deepCopy ($unit_def.labels | default dict) -}}
    {{- $_ := set $labels "sylva-units.unit" $unit_name -}}
    {{- $_ := mergeOverwrite $labels (include "sylva-units.labels" $envAll | fromYaml) }}

    {{/************ Sanity checks */}}

    {{- if (not (or (hasKey $unit_def "helmrelease_spec")
                    (hasKey $unit_def "kustomization_spec"))) -}}
      {{- fail (printf "unit '%s' does not have 'helmrelease_spec' or 'kustomization_spec' defined" $unit_name) -}}
    {{- end -}}

    {{- if (and (hasKey $unit_def "helm_repo_url")
                (not (hasKey $unit_def "helmrelease_spec"))) -}}
      {{- fail (printf "unit '%s' has 'helm_repo_url' but no 'helmrelease_spec'" $unit_name) -}}
    {{- end -}}

    {{- if hasKey ($unit_def.kustomization_spec|default dict) "dependsOn" -}}
      {{- fail (printf "units.$unit_name.kustomization_spec.dependsOn is defined, you need to use units.$unit_name.depends_on instead") -}}
    {{- end -}}

    {{- if hasKey ($unit_def.helmrelease_spec|default dict) "dependsOn" -}}
      {{- fail (printf "units.$unit_name.helmrelease_spec.dependsOn is defined, you need to use units.$unit_name.depends_on instead") -}}
    {{- end -}}

    {{- $helmrelease_spec_overrides := dict -}}
    {{- $kustomization_spec_overrides := dict -}}

    {{/************* Generation of Flux sources (GitRepository or OCIRepository or HelmRepository) */}}

    {{- if not (hasKey $unit_def "helm_repo_url") -}}
      {{/* if no helm_repo_url is set, then we know we'll use a GitRepository */}}

      {{/* sanity checks on the repo definition */}}
      {{- $repo_name := $unit_def.repo | default nil -}}
      {{- if not $repo_name -}}
        {{- fail (printf "units.%s.repo isn't defined" $unit_name) -}}
      {{- end -}}

      {{- if not (hasKey $envAll.Values.source_templates $repo_name) -}}
        {{- fail (printf "units.%s.repo refers to '%s' that isn't defined in .source_templates" $unit_name $repo_name) -}}
      {{- end -}}

      {{/* definition of the repo specification */}}

      {{- $repo_def := deepCopy (index $envAll.Values.source_templates $repo_name) -}}


      {{- $git_repo_name := ""}}
      {{- if hasKey $repo_def "existing_gitrepository" -}}
        {{- $git_repo_name = $repo_def.existing_gitrepository -}}
      {{- else -}}
        {{- $git_repo_name = printf "unit-%s" $unit_name -}}

        {{- $secret_ref := dict }}
        {{- if hasKey $repo_def "auth" }}
          {{- $secret_ref = dict "secretRef" (dict "name" (printf "git-repo-auth-%s" $repo_name)) -}}{{/* Secret is templated in git-repo-auth.yaml */}}
        {{- end -}}
        {{- $git_ref_override := dict "ref" ($unit_def.ref_override | default dict) -}}
        {{- $git_repo_spec := dict -}}
        {{- if (eq $repo_def.kind "GitRepository") }}
        {{- $git_repo_spec = mergeOverwrite $git_repo_spec $envAll.Values.git_repo_spec_default $repo_def.spec $secret_ref $git_ref_override -}}
        {{- else if (eq $repo_def.kind "OCIRepository") }}
        {{- $git_repo_spec = mergeOverwrite $git_repo_spec $envAll.Values.oci_repo_spec_default $repo_def.spec $secret_ref $git_ref_override -}}
        {{- end }}
        {{- if not (hasKey $git_repo_spec "url") -}}
          {{- fail (printf "repository template '%s' does not have 'url' defined" $repo_name) -}}
        {{- end }}

---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: {{ $repo_def.kind }}
{{/* we create either a GitRepository or OCIRepository*/}}
metadata:
  name: {{ $git_repo_name }}
  labels:
    sylva-units.repo: {{ $repo_name }}
{{ $labels | toYaml | indent 4 }}
spec: {{ $git_repo_spec | toYaml | nindent 2 }}

      {{ end }}

      {{ if hasKey $unit_def "helmrelease_spec" -}}
        {{/*
        if helm_release_spec is used then we inject our GitRepository in it as sourceRef
        (the Kustomization will in that case, see in 'unit_helmrelease_kustomization_spec_default',
         use sylva-core defined in 'gitrepository-self.yaml' as the GitRepo)
        */}}
        {{- $helmrelease_spec_overrides = dict "chart" (dict "spec" (dict "sourceRef" (dict "kind" "GitRepository" "name" $git_repo_name) "reconcileStrategy" "Revision")) -}}
      {{- else -}}{{/* if 'helmrelease_spec' isn't used, then the GitRepository is used for the Kustomization */}}
        {{- $kustomization_spec_overrides = dict "sourceRef" (dict "kind" "GitRepository" "name" $git_repo_name) -}}
      {{- end }}

    {{ else }}{{/* helm_repo is declared, we generate a HelmRepository */}}
---
      {{- $helm_repo_spec := dict -}}
      {{- $helm_repo_spec = mergeOverwrite $helm_repo_spec $envAll.Values.helm_repo_spec_default (dict "url" $unit_def.helm_repo_spec | default dict) (dict "url" $unit_def.helm_repo_url) -}}
      {{- $helmrelease_spec_overrides = dict "chart" (dict "spec" (dict "sourceRef" (dict "kind" "HelmRepository" "name" (printf "unit-%s" $unit_name)))) }}
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: unit-{{ $unit_name }}
  labels:
{{ $labels | toYaml | indent 4 }}
spec: {{ $helm_repo_spec | toYaml | nindent 2 }}
    {{ end -}}

    {{/******************* Generation of the Kustomization */}}

    {{/* here, if "helmrelease_spec" is used, we define the spec of the inner HelmRelease */}}
    {{- if hasKey $unit_def "helmrelease_spec" -}}
      {{/* this is where we refer to ./kustomize-units/helmrelease-generic */}}
      {{- $kustomization_spec_overrides = mergeOverwrite $kustomization_spec_overrides $envAll.Values.unit_helmrelease_kustomization_spec_default -}}

      {{- $helmrelease_spec := dict "releaseName" $unit_name -}}
      {{- $helmrelease_spec := mergeOverwrite $helmrelease_spec $envAll.Values.unit_helmrelease_spec_default ($unit_def.helmrelease_spec | default dict) $helmrelease_spec_overrides -}}

      {{- if hasKey $unit_def "helm_secret_values" -}}
        {{/* if the unit has "helm_secret_values" defined, then
             we add to valuesFrom a Secret with "helm_secret_values"
        */}}
        {{- $secretName := printf "helm-unit-values-%s" $unit_name }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels: {{ $labels | toYaml | nindent 4 }}
stringData:
  values: |{{ $unit_def.helm_secret_values | toYaml | nindent 4 }}

        {{ $valuesFrom := $helmrelease_spec.valuesFrom | default list -}}
        {{- $secretsValues := dict "kind" "Secret" "name" $secretName "valuesKey" "values" -}}

        {{- $_ := set $helmrelease_spec "valuesFrom" (append $valuesFrom $secretsValues) -}}

      {{- end -}}

      {{/* inject the HelmRelease spec via a patch in the Kustomization: */}}
      {{- $patch := include "helmrelease-kustomization-patch-template" (tuple $unit_name $helmrelease_spec $labels) | fromYaml -}}
      {{- $_ := set $kustomization_spec_overrides "patches" (list $patch) -}}
    {{- end -}}

    {{- $kustomization_spec := dict -}}

    {{- if hasKey $unit_def "kustomization_substitute_secrets" -}}
        {{/* if the unit has "kustomization_substitute_secrets" defined, then
             we add to substituteFrom a Secret with "kustomization_substitute_secrets"
        */}}
        {{- $secretName := printf "kustomization-unit-substitute-%s" $unit_name }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels: {{ $labels | toYaml | nindent 4 }}
stringData:
{{ $unit_def.kustomization_substitute_secrets | toYaml | nindent 2 }}

      {{ $substituteFrom := ($kustomization_spec.postBuild | default dict).substituteFrom | default list -}}
      {{- $secretsValues := dict "kind" "Secret" "name" $secretName -}}

      {{- $_ := mergeOverwrite $kustomization_spec (dict "postBuild" (dict "substituteFrom" (append $substituteFrom $secretsValues))) -}}
    {{- end -}}

    {{/* let's set the dependsOn field */}}
    {{- $dependsOn := dict -}}
    {{- if hasKey $unit_def "depends_on" -}}
      {{- $dependsOnList := list -}}
      {{- range $dep_unit_name, $is_depend_on := $unit_def.depends_on -}}
        {{- if $is_depend_on -}}

          {{- if not (hasKey $envAll.Values.units $dep_unit_name) -}}
            {{- fail (printf "unit '%s' is declared with a dependency on non-existing unit '%s'" $unit_name $dep_unit_name) -}}
          {{- else if not (include "unit-enabled" (tuple $envAll $dep_unit_name)) -}}
            {{- fail (printf "unit '%s' is declared with a dependency on disabled unit '%s'" $unit_name $dep_unit_name) -}}
          {{- end -}}

          {{- $dependsOnList = append $dependsOnList (dict "name" $dep_unit_name) -}}

        {{- end -}}
      {{ end }}
      {{- $_ := set $dependsOn "dependsOn" $dependsOnList -}}
    {{- end -}}

    {{/* finalize the definition of the Kustomization spec by merging everything we have */}}
    {{- $kustomization_spec = mergeOverwrite $kustomization_spec $envAll.Values.unit_kustomization_spec_default ($unit_def.kustomization_spec | default dict) $dependsOn $kustomization_spec_overrides }}

---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
kind: Kustomization
metadata:
  name: {{ $unit_name }}
  labels: {{ $labels | toYaml | nindent 4 }}
spec: {{ $kustomization_spec | toYaml | nindent 2 }}
  {{- end -}}
{{ end }}
