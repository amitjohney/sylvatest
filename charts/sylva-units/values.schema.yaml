# This file contains a JSONSchema to validate the values given
# as inputs to the chart.
#
# **** How to edit this file *****
#
# This file is encoded as YAML instead of JSON to allow comments,
# and make editing and diffing easier.
#
# The values.schema.json file is the file actually used by the Helm chart
# and MUST BE RECREATED after each modification of this file:
# (export https_proxy if behind a Forward Proxy)
#
#   ./tools/generate_json_schema.py
#
# (a CI job is here to check that)
#
# You can test that this file is a valid JSONSchema with:
#
#   tools/generate_json_schema.py && python -m jsonschema -o pretty /usr/lib/python3/dist-packages/jsonschema/schemas/draft2020-12.json -i charts/sylva-units/values.schema.json
#
# (a CI job is here to check the same thing)
#
# **** How to test that values.yaml files conform to this schema ****
#
# Helm template will do this validation:
#
#   tools/generate_json_schema.py && helm template charts/sylva-units --values foo.yaml
#
# You can also use another JSONSchema validation tool (it's useful to have more detailed answers than what Helm produces):
#
#   To test the chart default values.yaml:
#
#      tools/generate_json_schema.py && \
#        tools/yaml2json.py < charts/sylva-units/values.yaml | python -m jsonschema -o pretty charts/sylva-units/values.schema.json -i /dev/stdin
#
#   To test the combination of the default values.yaml combined with other values files:
#
#      tools/generate_json_schema.py && \
#        tools/yaml-merge.py -o json charts/sylva-units/values.yaml foo.yaml | python -m jsonschema -o pretty charts/sylva-units/values.schema.json -i /dev/stdin
#


$schema: https://json-schema.org/draft/2020-12/schema#

title: Schema for sylva-units chart values

# this description is formatted so that it will appear very clearly
# in the JSON counterpart that the JSON isn't meant to be edited
description:
  ----------------------------------------------------------------------
  DO NOT EDIT THIS FILE AS JSON, THE YAML VERSION IS THE SOURCE OF TRUTH
  ----------------------------------------------------------------------

# sub-schemas used later on in the actual schema
$defs:
  gotpl:
    type: string
    pattern: "^{{ .* }}$"

  username-password:
    anyOf:
      - type: object
        additionalProperties: false
        required:
          - username
          - password
        patternProperties:
          "^(username|password)$":
            type: string
      - $ref: "#/$defs/gotpl"

  boolean-string:
    type: string
    enum: ["true", "false", ""]

  enabled:
    anyOf:
      - type: boolean
      - $ref: "#/$defs/gotpl"
      - $ref: "#/$defs/boolean-string"

  string-with-gotpl:
    type: string
    pattern: ".*{{ .* }}.*"

  ipv4-cidr-full:
    type: string
    pattern: ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/([1-9]|[12]\d|3[012]))$

  ipv4-range:
    type: string
    pattern: ^(?:(?:[01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(?:[01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])-(?:(?:[01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(?:[01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])$

  sylva-capi-cluster-values:
    # this sub-schema will be completed with actual sylva-capi-cluster-values with json schema generation
    type: object

  libvirt-metal-values:
    # this sub-schema will be completed with actual libvirt-metal values schema with json schema generation
    type: object

  unit_info:
    # this sub-schema describes documentation block for units
    type: object
    additionalProperties: false
    required: [description]
    properties:
      description:
        type: string
      details:
        type: string
      internal:
        type: boolean
      maturity:
        type: string
        enum: ["core-component", "stable", "beta", "experimental"]
      version:
        type: string
      hidden:
        type: boolean
      kustomization_path:
        type: string

  certificate:
    type: string
    pattern: ^-----BEGIN CERTIFICATE-----

  cert-and-key:
    type: object
    additionalProperties: false
    properties:
      cert:
        $ref: "#/$defs/certificate"
      key:
        type: string
        pattern: ^-----BEGIN PRIVATE KEY-----
    anyOf:  # we can have either both key and cert, or none of those
    - required: [ cert, key ]
    - allOf:
      - not:
          required: [ cert ]
      - not:
          required: [ key ]

# lines with '# -------------------------------' correspond to keys in values.yaml
# (the rest being the JSONSchema language itself)

additionalProperties: false

# the default values.yaml covers all required keys, so in general
# no top-level key will be missing, this check is here only to
# cover the case where a user would mistakenly remove one of them by "nulling" it
# (e.g. by setting `proxies:` without any subdict in override values)
required:
  - registry_secret
  - git_repo_spec_default
  - source_templates
  - helm_repo_spec_default
  - unit_kustomization_spec_default
  - unit_helmrelease_spec_default
  - unit_helmrelease_kustomization_spec_default
  - units_enabled_default
  - units
  - cluster
  - proxies
  - env_type
  - registry_mirrors

properties:

  fullnameOverride:  # -------------------------------
    type: string
  nameOverride:  # -------------------------------
    type: string

  registry_secret: # -------------------------------
    type: object
    patternProperties:
      "^[a-z0-9][a-z0-9.-]*[a-z0-9]$":  # -------------------------------
        anyOf:
          - type: string
            pattern: "{{ .* }}"
          - $ref: "#/$defs/username-password"

  git_repo_spec_default:  # -------------------------------
    type: object
    # (fields from a spec of a GitRepository Flux resource)

  oci_repo_spec_default:  # -------------------------------
    type: object
    # (fields from a spec of a OCIRepository Flux resource)

  source_templates:  # -------------------------------
    type: object
    additionalProperties: false
    patternProperties:

      "^[a-z0-9][a-z0-9.-]*[a-z0-9]$":  # -------------------------------
        type: object
        additionalProperties: false
        anyOf:
          - required:
            - spec
            - kind
          - required:
            - existing_source
        properties:

          existing_source:  # -------------------------------
            anyOf:
            - type: "null"
            - type: object
              # (fields from a spec of a Flux resource)
              required:
                - name
                - kind
              additionalProperties: false
              properties:

                name:  # -------------------------------
                  type: string

                kind: # -------------------------------
                  type: string
                  enum: ["GitRepository", "OCIRepository"]

                namespace:  # -------------------------------
                  type: string

          auth:  # -------------------------------
            $ref: "#/$defs/username-password"

          kind: # -------------------------------
            type: string
            enum: ["GitRepository", "OCIRepository"]

          spec:  # -------------------------------
            type: object
            # (fields from a spec of a Flux resource)
            required:
              - url
              - ref
            properties:

              url:  # -------------------------------
                anyOf:
                  - type: string
                    format: uri
                  - $ref: "#/$defs/string-with-gotpl"

        allOf:
        - not:
            # prevent 'spec.secretRef' from being specified if 'auth' is set
            # because secretRef is generated by the chart in that case
            required:
              - auth
            properties:
              spec:
                required:
                  - secretRef
        - if:
            properties:
              kind:
                const: GitRepository
          then:
            properties:
              spec:  # -------------------------------
                type: object
                properties:

                  ref:  # -------------------------------
                    type: object
                    additionalProperties: false
                    anyOf:
                      - required:
                        - branch
                      - required:
                        - tag
                      - required:
                        - commit
                    patternProperties:
                      '(branch|tag|commit)':  # -------------------------------
                        type: string

        - if:
            properties:
              kind:
                const: OCIRepository
          then:
            properties:
              spec:  # -------------------------------
                type: object
                properties:

                  ref:  # -------------------------------
                    type: object
                    additionalProperties: false
                    anyOf:
                      - required:
                        - digest
                      - required:
                        - semver
                      - required:
                        - tag
                    patternProperties:
                      '(digest|semver|tag)':  # -------------------------------
                        type: string
                      branch:  # -------------------------------
                        const: '{{ tuple "(unused)" false | include "set-only-if" }}'  # particular case to allow key deletion (see use-oci-artifacts.values.yaml)

  helm_repo_spec_default:  # -------------------------------
    type: object
    # this is a spec of a GitRepository Flux resource

  unit_kustomization_spec_default:  # -------------------------------
    type: object
    # TODO: detail more

  unit_helmrelease_spec_default:  # -------------------------------
    type: object
    # TODO: detail more

  unit_helmrelease_kustomization_spec_default:  # -------------------------------
    type: object
    # TODO: detail more

  unit_templates:  # -------------------------------
    type: object
    "^[a-z0-9][a-z0-9-]*[a-z0-9]$":  # -------------------------------
      type: object

  units:  # -------------------------------
    type: object
    patternProperties:

      "^[a-z0-9][a-z0-9-]*[a-z0-9]$":  # -------------------------------
        type: object
        additionalProperties: false
        properties:

          enabled:  # -------------------------------
            $ref: "#/$defs/enabled"

          enabled_conditions:
            type: array
            items:
              $ref: "#/$defs/enabled"

          info:
            $ref: "#/$defs/unit_info"

          unit_template:
            type: string
            pattern: "^[a-z0-9][a-z0-9-]*[a-z0-9]$"

          repo:  # -------------------------------
            anyOf:
              - type: string
              - type: "null"

          labels:  # -------------------------------
            type: object
            patternProperties:
              ".*":
                type: string

          annotations:  # -------------------------------
            type: object
            patternProperties:
              ".*":
                type: string

          depends_on:  # -------------------------------
            anyOf:
            - type: object
              patternProperties:
                "^([a-z0-9][a-z0-9-]*[a-z0-9](/[a-z0-9][a-z0-9-]*[a-z0-9])?|{{ .* }})$":  # a unit name, optionally prefixed by a namespace name (can be templated)
                  anyOf:
                    - type: boolean
                    - $ref: "#/$defs/gotpl"
            - $ref: "#/$defs/gotpl"

          ref_override:  # -------------------------------
            type: string

          kustomization_spec:  # -------------------------------
            type: object
            properties:
              path:  # -------------------------------
                type: string

              _patches:  # -------------------------------
                type: array
                items:
      