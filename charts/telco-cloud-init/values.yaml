# Default values for telco-cloud-init.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# generic helm chart release name overrides
nameOverride: ""
fullnameOverride: ""

# registry secrets
registry_secret:
  registry.gitlab.com:
    username: your_user_name
    password: glpat-XXXXX

# repository secrets
git_auth_default:
  username: your_user_name
  password: glpat-XXXXX

git_repo_spec_default:
  interval: 60m0s
  gitImplementation: libgit2

git_repo_templates:
  # <repo-name>:
  #   # auth: # can be used to override git_auth_default
  #   #   username: plop
  #   #   password: flop
  #   base_url: https://gitlab.com/t6306/components
  #   spec:  # partial spec for a Flux GitRepository
  #     # if unset, 'url' is built based on 'base_url' + component_name + '.git'
  #     url: https://gitlab.com/t6306/components/capi-bootstrap.git
  #     #secretRef: # is autogenerated based on 'auth' or 'git_auth_default'
  #     ref: # can be overridden per-component, with 'ref_override'
  #       branch: main

  default:
    base_url: https://gitlab.com/t6306/components
    spec:
      ref: # can be overridden per-component with 'ref_override'
        branch: main

  capi-bootstrap:
    spec:
      url: https://gitlab.com/t6306/components/capi-bootstrap.git
      ref:
        # tag/commit will take precedence, see https://fluxcd.io/flux/components/source/api/#source.toolkit.fluxcd.io/v1beta2.GitRepositoryRef
        branch: develop


# this defines the default for the .spec produced for the Kustomization resource
# generated for each item of 'components'
component_kustomization_spec_default:
  force: false
  prune: true
  interval: 15m
  retryInterval: 1m
  wait: false
  timeout: 30s

# this defines Flux Kustomizations objects, and for each
# a corresponding GitRepository (and Secret, TODO: the Secret don't need to be generated for each component)
components:
  # <component-name>:
  #   enabled: yes/no/management-only
  #   repo: <name of the repo under 'git_repo_templates', defaults to 'default'>
  #   labels: (optional) dict holding labels to add to the resources for this component
  #   ref_override: optional, if defined, this dict will be used for the GitRepository overriding spec.ref
  #   spec:  # contains a partial spec for a FluxCD Kustomization, most of the
  #          # things are generated from component_kustomization_spec_default
  #     # sourceRef is generated from .git_repo field
  #     path: ./path-to-component-under-repo
  #     # the final path will hence be:
  #     # - <git repo template>.spec.url + <component>.spec.path  (if <git repo template> has spec.url defined)
  #     # - <git repo template>.base_url + <component name> + '.git' + <component>.spec.path
  #

  # test-example:
  #   
  #   thanks to git_repo_templates.default which has base_url defined this is sufficient
  #   to create a GitRepository pointing to  https://gitlab.com/t6306/components/example-comp.git/
  #   and a FluxKustomization deploying the kustomization.yaml found there

  flux-system:
    # note that Flux is always installed on the current cluster as a pre-requisite to installing the chart
    # this components contains Flux definitions *to manage the Flux system itself via gitops*

    ## FIXME: paint isn't dry yet, but later we'll enable that
    enabled: no  # management-only
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/flux-system
      targetNamespace: flux-system
      wait: true
      postBuild:
        substitute:
          var_substitution_enabled: "true" # To force substitution when configmap does not exist
        substituteFrom:
        - kind: ConfigMap
          name: proxy-env-vars
          optional: true

  kubed:
    use: no # need to enable for 'capd' provider
    # FIXME: maybe is isn't required any more with this helm chart, and we could create secrets in components namespaces?
    # We need kubed to copy secrets from namespace to namespace for the 'capd' provider
    # Unfortunately, it doesn't seems to be possible to pass registry secrets from default namespace to others without the use of an additionnal tool like this one:
    # - We can't use kustomize's secretGenerator to copy secret across namespaces, as secret value would be base64-encoded, thus flux PostBuild wouldn't be able to substitute it.
    # - Additionnaly, flux substituteFrom doesn't supports keys starting by a dot, so we can't susbstitute directly from docker-registry secret as the key is .dockerconfigjson
    # - And finally, if we manage to place this secret in another variable, substitution will fail as secret well be passed as a string, whereas .dockerconfigjson is supposed to contain a json...
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/kubed
      wait: true

  cert-manager:
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/cert-manager
      wait: true

  capi:
    # ref_override:  # test
    #   branch: i-really-need-dev-branch-foo
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/capi
      dependsOn:
      - name: cert-manager
      wait: true

  capd:
    enabled: no
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/capd
      dependsOn:
      - name: cert-manager
      postBuild:
        substituteFrom:
        - kind: ConfigMap
          name: cluster-vars
      wait: true

  capo:
    enabled: no
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/capo
      dependsOn:
      - name: cert-manager
      wait: true

  capm3:
    enabled: no
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/capm3
      dependsOn:
       - name: cert-manager
      wait: true

  capv:
    enabled: no
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/capv
      dependsOn:
       - name: cert-manager
      wait: true

  cabpk:
    enabled: no
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/cabpk
      dependsOn:
      - name: cert-manager
      wait: true

  cabpr:  # RKE2
    enabled: no
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/cabpr
      dependsOn:
      - name: cert-manager
      wait: true

  cluster-resource-sets:  # for now only needed for kubeadm
    enabled: no  ## we'll turn this to false once we deploy calico with Flux
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/cluster-resource-sets
      dependsOn:
      - name: capi
      wait: true

  cluster:
    enabled: yes
    repo: capi-bootstrap
    labels:
      suspend-on-pivot: "yes"  # this component must be suspended before pivot
    spec:
      # see note below under .cluster
      # the choice made here, for now, requires setting other values consistently under .cluster.xxx
      path: ./kustomize-components/management-cluster/rke2-capd/base
      dependsOn:
      - name: capi
      postBuild:
        substituteFrom:
        - kind: ConfigMap
          name: cluster-vars
      healthChecks:
        - apiVersion: cluster.x-k8s.io/v1beta1
          kind: Cluster
          name: management-cluster
          namespace: default

## stuff related to the 'cluster' component

cluster:
  name: management-cluster
  # TODO: derive kubeconfig secret name from this ^

  # image reference depends provider
  image: registry.gitlab.com/t6306/components/docker-images/rke2-in-docker:v1-24-4-rke2r1

  # for now, the choice below needs to be made
  # consistently with the choice of a matching kustomization path
  # for the 'cluster' component
  # e.g. you can use ./management-cluster-def/rke2-capd
  flavor:
    infra_provider: capd   # capo
    bootstrap_provider: cabpr  # RKE2 or kubeadm

  capo:
    ssh_key_name:
    image: capo-ubuntu-2004-kube-v1.23.6-calico-3.23.1
    network_id:  # openstack network to use as external network
    clouds_yaml: # (this is a dict, not a YAML string)
    #cacert: # cert used to validate CA of OpenStack APIs

capd:
  docker_host: unix:///var/run/docker.sock

# debug_values can be used to see how flux merged helm release values in telco-cloud-init-values-debug secret:
# kubectl get secrets telco-cloud-init-values-debug -o template="{{ .data.values }}" | base64 -d
debug_values: no


# 'phase' determines whether we are instantiating this chart
# on the bootstrap cluster or on the management cluster
#
# this is used to determine which component manifests to generate
# for a given item under 'components':
# if 'enabled' is set to 'management-only' then the component is enabled only if 'phase: management'
phase: management

component_default_enable: management-only  # this simply ensures that adding a component in this file under components does not implicitly enable it for "bootstrap"
