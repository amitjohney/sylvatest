# Default values for telco-cloud-init.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# generic helm chart release name overrides
nameOverride: ""
fullnameOverride: ""

# 'phase' determines whether we are instantiating this chart
# on the bootstrap cluster or on the management cluster
# (this is used to determine which component manifest to generate)
phase: management

# registry secrets
registry_secret:
  registry.gitlab.com:
    username: your_user_name
    password: glpat-XXXXX

# repository secrets
git_auth_default:
  username: your_user_name
  password: glpat-XXXXX

git_repo_spec_default:
  interval: 60m0s
  gitImplementation: libgit2

git_repo_templates:

  default:
    base_url: https://gitlab.com/t6306/components
    spec:
      ref: # can be overridden per-component with 'ref_override'
        branch: main

  capi-bootstrap:
    spec:
      url: https://gitlab.com/t6306/components/capi-bootstrap.git
      ref:
        # tag/commit will take precedence, see https://fluxcd.io/flux/components/source/api/#source.toolkit.fluxcd.io/v1beta2.GitRepositoryRef
        branch: develop


# this defines the defaults for the .spec produced for the Kustomization resource
# generated for each item of 'components'
component_kustomization_spec_defaults:
  force: false
  prune: false
  interval: 100000m
  retryInterval: 30s
  path: ""
  wait: false
  timeout: 30s

component_default_enable: no

# this defines Flux Kustomizations objects, and for each
# a corresponding GitRepository (and Secret, TODO: the Secret don't need to be generated for each component)
components:
  # <component-name>:
  #   enabled: yes/no/bootstrap-only/management-only
  #   repo: <name of the repo under 'git_repo_templates', defaults to 'default'>
  #   labels: (optional) dict holding labels to add to the resources for this component
  #   ref_override: optional, if defined, this dict will be used for the GitRepository overriding spec.ref
  #   spec:  # contains a partial spec for a FluxCD Kustomization, most of the
  #          # things are generated from component_kustomization_spec_defaults
  #     # sourceRef is generated from .git_repo field
  #     path: ./path-to-component-under-repo
  #     # the final path will hence be:
  #     # - <git repo template>.spec.url + <component>.spec.path  (if <git repo template> has spec.url defined)
  #     # - <git repo template>.base_url + <component name> + '.git' + <component>.spec.path
  #

  # test:
  #   enabled: false
  # will create a GitRepository pointing to  https://gitlab.com/t6306/components/example-comp.git/
  # will create a FluxKustomization deploying the kustomization.yaml found there

  flux-system:
    # note that Flux is always installed on the current cluster as a pre-requisite to installing the chart
    # this components contains Flux definitions *to manage the Flux system itself via gitops*

    ## FIXME: paint isn't dry yet, but later we'll enable that
    enabled: no  # management-only
    repo: capi-bootstrap
    spec:
      path: ./kustomize-components/flux-system
      targetNamespace: flux-system
      wait: true
      postBuild:
        substitute:
          var_substitution_enabled: "true" # To force substitution when configmap does not exist
        substituteFrom:
        - kind: ConfigMap
          name: proxy-env-vars
          optional: true

## stuff related to the 'cluster' component

cluster:
  name: management-cluster
  # TODO: derive kubeconfig secret name from this ^

  # image reference depends provider
  image: registry.gitlab.com/t6306/components/docker-images/rke2-in-docker:v1-24-4-rke2r1

  # for now, the choice below needs to be made
  # consistently with the choice of a matching kustomization path
  # for the 'cluster' component
  # e.g. you can use ./management-cluster-def/rke2-capd
  flavor:
    infra_provider: capd   # capo
    bootstrap_provider: cabpr  # RKE2 or kubeadm

  capo:
    ssh_key_name:
    image: capo-ubuntu-2004-kube-v1.23.6-calico-3.23.1
    network_id:  # openstack network to use as external network
    clouds_yaml: # defined via helm install --set-file capo.clouds_yaml=/path/to/cloud.yaml
    #cacert: # cert used to validate CA of OpenStack APIs

capd:
  docker_host: unix:///var/run/docker.sock

debug_values: no

proxies:
  http_proxy: http://your.company.proxy.com
  https_proxy:
  no_proxy:
