stages:
  - generate
  - test
  - deploy

image: docker:latest

services:
  - name: docker:dind
    alias: docker

variables:
  DOCKER_TLS_CERTDIR: ""
  GITLEAKS_ARGS: '--verbose --log-opts=$CI_COMMIT_SHA'

default:
  tags:
    - gitlab-org-docker
    # - docker

# included templates
include:
  # Gitleaks template
  - project: "to-be-continuous/gitleaks"
    ref: "2.1"
    file: "templates/gitlab-ci-gitleaks.yml"

chart-generator:
  stage: generate
  image: alpine:latest
  script:
    - echo "Generate a job for each modified charts"
    - ./tools/gci-templates/scripts/generate-pipeline.sh > generated-pipeline.yml
  artifacts:
    expire_in: 1 hour
    paths:
      - generated-pipeline.yml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - charts/**/*
        - tools/gci-templates/**/*

chart-jobs:
  stage: generate
  needs:
    - chart-generator
  trigger:
    include:
      - artifact: generated-pipeline.yml
        job: chart-generator
    strategy: depend
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - charts/**/*
        - tools/gci-templates/**/*

yamllint:
  stage: test
  before_script:
    - apk add --no-cache yamllint
  script:
    - 'yamllint . -d "$(cat < tools/gci-templates/yamllint.yaml) $(cat < tools/gci-templates/yamllint-helm-exclude-charts.yaml)"'
  only:
    - merge_requests

avoid-typo-on-bootstrap:
  stage: test
  script:
    - |
      rm -rf .git  # because busybox grep does not support --exclude-dir
      echo "Check against frequent typos on 'bootstrap'..."
      set +e
      typos=$(grep -rnsiE 'boostrap|bootrap|bootsrap' . | grep -v '.gitlab-ci.yaml:      typos=')
      set -e
      if [ -n "$typos" ]; then
        echo "A few typos were found on the 'bootstrap' word:"
        echo "-----------------"
        echo "$typos"
        echo "-----------------"
        exit 1
      fi

check-docs-markdown:
  image: registry.gitlab.com/gitlab-org/gitlab-docs/lint-markdown:alpine-3.16-vale-2.20.2-markdownlint-0.32.2-markdownlint2-0.5.1
  stage: test
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - |
      md_files=$(git diff --name-only $CI_COMMIT_SHA origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME | grep "\.md$")
      if [ -n "$md_files" ] ; then
        markdownlint-cli2-config tools/gci-templates/.markdownlint.yml $md_files
      else
        echo "No modified .md files"
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "**/*.md"

.test-capd:
  stage: deploy
  before_script:
    - echo -e "\e[1m\e[0Ksection_start:`date +%s`:before_script_section[collapsed=true]\r\e[0KRunning before_script step\e[0m"
    # FIXME: build an image with following tools (+clusterctl)
    - apk add --no-cache curl bash git gettext # for envsubst
    - curl -Lo /usr/local/bin/kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64
    - chmod +x /usr/local/bin/kind
    - curl -Lo /usr/local/bin/kubectl https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl
    - chmod +x /usr/local/bin/kubectl
    - curl -Lo /usr/local/bin/kubetail https://raw.githubusercontent.com/johanhaleby/kubetail/master/kubetail
    - chmod +x /usr/local/bin/kubetail
    - curl -L https://get.helm.sh/helm-v3.10.1-linux-amd64.tar.gz | tar xz
    - mv linux-amd64/helm /usr/local/bin/
    - curl -Lo /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64
    - chmod +x /usr/bin/yq

    - DOCKER_IP=$(getent hosts docker | awk '{print $1}')
    - |
      # create a cluster with access to API endpoint through docker-in-docker address
      cat <<EOF | kind create cluster --name capd --config=-
      kind: Cluster
      apiVersion: kind.x-k8s.io/v1alpha4
      networking:
        apiServerAddress: "$DOCKER_IP"
        apiServerPort: 6443
      EOF
    - kubectl cluster-info --context kind-capd

    - KIND_PREFIX=$(docker network inspect kind -f '{{ (index .IPAM.Config 0).Subnet }}')
    - ip route add $KIND_PREFIX via $DOCKER_IP

    - export DOCKER_HOST=tcp://$DOCKER_IP:2375
    - find environment-values/*-capd/ -name git-secrets.env -exec sed -i "s/GIT_USERNAME/$CI_REGISTRY_USER/;s/GIT_TOKEN/$CI_JOB_TOKEN/" {} \;
    - find environment-values/*-capd/ -name values.yaml -exec yq -i '.cluster.capd.docker_host = strenv(DOCKER_HOST)' {} \;
    - export CLUSTER_EXTERNAL_IP=$(echo $KIND_PREFIX | awk -F"." '{print $1"."$2"."$3".100"}')
    - find environment-values/*-capd/ -name values.yaml -exec yq -i '.cluster.cluster_external_ip = strenv(CLUSTER_EXTERNAL_IP)' {} \;
    - export DEBUG_ON_EXIT=1

    - echo -e "\e[0Ksection_end:`date +%s`:before_script_section\r\e[0K"
  artifacts:
    when: on_failure
    expire_in: 6 hour
    paths:
      - debug-on-exit.log
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_LABELS =~ /run-e2e-tests/
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
  tags:
    - o-romania

test-rke2-capd:
  timeout: 60min
  extends: .test-capd
  script:
    - ./bootstrap.sh environment-values/rke2-capd
    - kubectl --kubeconfig management-cluster-kubeconfig logs $(kubectl --kubeconfig management-cluster-kubeconfig get pod --selector job-name=check-rancher-clusters-job -o=jsonpath='{.items[?(@.status.phase=="Succeeded")].metadata.name}')
  rules:
    #FIXME(feleouet) Run it only manually, for now until we fix it, but not in MRs otherwise they'd be blocked
    - if: $CI_PIPELINE_SOURCE != 'merge_request_event'
      when: manual

test-kubeadm-capd:
  timeout: 45min
  extends: .test-capd
  script:
    - ./bootstrap.sh environment-values/kubeadm-capd
    - kubectl --kubeconfig management-cluster-kubeconfig logs $(kubectl --kubeconfig management-cluster-kubeconfig get pod --selector job-name=check-rancher-clusters-job -o=jsonpath='{.items[?(@.status.phase=="Succeeded")].metadata.name}')
