apiVersion: v1
kind: Secret
metadata:
  name: capv-cluster-values
  namespace: default
stringData:
  values: |
    # -- Insecure flag for secure/insecure connection to vSphere
    insecure: true

    # -- Labels to add to all objects generated by this chart
    commonLabels: {}
    # -- Annotations to add to all objects generated by this chart
    commonAnnotations: {}


    wait:
      # -- Deploy a job waiting for machines to rollout after deployment
      cluster: false
      # -- Deploy a job waiting for apiServer to be available
      apiServer: false
      # -- max time waiting for resources to rollout
      timeout: 900


    cluster:
      # -- Cluster name. If unset, the release name will be used
      name: ""
      controlPlaneEndpoint:
        # -- IP or DNS name of the kubernetes endpoint
        host: ${CLUSTER_EXTERNAL_IP}
        # -- Kubernetes endpoint port
        port: 6443
        # -- Linux interface on the node
        interface: ""
      # -- Network CIDR for pods
      podCidrBlocks:
        - 192.168.0.0/16
      # -- Network CIDR for services
      servicesCidrBlocks:
        - 10.43.0.0/16
      # -- Additionnal ClusterResource to add to ClusterResourceSet
      additionalClusterResourceSet: []


    kubernetes:
      # -- Version of kubernetes
      version: v1.22.8
      # -- Pem encoded certificate to authenticate clients over x509
      additionnalClientCaFile: ""
      kubeadm:
        # -- Additional kubelet command line arguments for init and join configurations
        commonKubeletExtraArgs: {}
        controlPlane:
          # -- Kubeadm cluster configuration, more info : https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta3/
          clusterConfiguration: {}
          # -- Additional files to create on the kubeadm control plane instances
          additionalFiles:
          - content: |
              [Service]
              Environment='HTTP_PROXY=${http_proxy}'
              Environment='HTTPS_PROXY=${https_proxy}'
              Environment='http_proxy=${http_proxy}''
              Environment='https_proxy=${https_proxy}'
              Environment='NO_PROXY=${no_proxy}'
              Environment='no_proxy=${no_proxy}'
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
          - content: |
              Acquire {
                HTTP::proxy ${http_proxy};
                HTTPS::proxy ${http_proxy};
              }
            path: /etc/apt/apt.conf.d/proxy.conf
          - path: "/usr/local/share/ca-certificates/163.162.95.108.crt"
            content: |
              -----BEGIN CERTIFICATE-----
              MIIFfDCCA2SgAwIBAgIUbPPuLUyQoQu2eeLtgqEXv+owRtcwDQYJKoZIhvcNAQEL
              BQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
              GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMTA1MjAwNzAwMjBaFw0zMTA1
              MTgwNzAwMjBaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEw
              HwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggIiMA0GCSqGSIb3DQEB
              AQUAA4ICDwAwggIKAoICAQDb5JPZ+cZRh8KBCwKLJlZo/NzA0GVkYzoYPHNc/C6H
              YTqp3v0Hq//bauU0VQlqX0YVAqkdWuxx6gm8YheGhnpBzEVr8sFbTWroOV4w91ei
              ScHZ+tqLRFsSIFHKgL5Uy49TYjHRQKgee+aRQeLP1yJ6mWsaWeY8gyc/2vnu5JWN
              wEVl+2fxdzaDfyBsCXV2UE6KEJJt8PFRFav6D/THZIZh58G/YtEz8cf+pZDWnWWR
              uYgV19ZSty3+8Bsi3uGVxJi2empqBO9Ta1ilP3gJkbmg2NUtzQkzv9LSMPui7oOu
              PsPbnbQV62HU+fI/Hj1HGe+1w66LSuYbKBsI65/bffO01hEDSk1cnsRo2+gELckp
              0fwIwqNiW84LJ+epeyJDJT4or8gP8nj6g+yLgbWAeacdzLPlf0fG3QatDz3Fni8I
              UGpKe6GGpvEAFtvMwrCA2pvFox6jOBtoDaEyZa5WxEOUCvlItr9ZTnUPFn2o0fnQ
              VT2+X/D7VX2mwoA8/Bm4EwSEZe8iwt7cHj8pmjfe+ysHzYyD34PU3IG76p0FdaqE
              0v0uPsRhwZZYqHw3M6BRNXJhci5wp5bHJV0YGCVo0IuUzKQMmu8t8oflZvIh6CHc
              lPwf4SwGQxmDUrfIUqQImgiWmcTBiYUtMWHZ6x0yp3aSRVErbTbPKmKgxlSZWKW3
              OwIDAQABo2QwYjAPBgNVHREECDAGhwSjol9sMB0GA1UdDgQWBBRkDBqwTqBfLtWF
              PcMpinzldo06ezAfBgNVHSMEGDAWgBRkDBqwTqBfLtWFPcMpinzldo06ezAPBgNV
              HRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4ICAQCBtJ5kJk12iO++uEW35ZYD
              +Iz9xPll2lCcSkil2N8Aq9/WEOAsvpwos15uPBMF/VWkTxhCD+woNdCT2GQLkB9P
              IEYf9Znitqchb+wA9Vxmn5qXKze+BPama25lSiuVWZ5qNj58yiX082lF0K1BR/qx
              yPDbD5gxtv8Kb1lZZFyOI02xn69gWGf5YJXO/gWVNiBcU5RSYVi42GIIBhF3PdN2
              oMkh7+SZ/IBklSpJcZmK3q+R2IvzTWXKki7DW/y9CACTiRNpYl2fj6Auukc0JXq9
              OTqlXuSoK/rBIJo6xIE5Vt0eYQge0YiS/Rz3WqakMa3mJ/KvBfKq9cGJeAsOr8x+
              uOYXBnGXmEJtetuoMEWyzSr8hWMgYM1Muv4GIwjZHcn2guVHvUYUCxI3SOQ/cuKF
              Y11Ly/aUqmCvu1lCZB7pBmeROP7dEiLXpNCJmYQfeZdwlS4cxqoWDrEXVb+FR/0n
              QeSLbGGlLuCqhkwIEUA2U8MosQMjigAD2uxs8fcq6EHAmrAweo1Aqcg+p0DaPmwD
              j6jpYdyzVDfz921tkbh/WCyhjONp1md4F3F8LnOvpww9CwqRCyhw1PwkMNee4Vh+
              rmvcwG70m9+81xMSGkGHovqzaeOJgc9MwXP0yPjK1miorHDhapcnl/mMw3rTVxuN
              /M/KbKXgNbf5SeT7lKjflw==
              -----END CERTIFICATE-----
          # -- Additional commands to execute on control plane before kubeadm join/init
          preKubeadmAdditionalCommands:
          - update-ca-certificates
          - systemctl daemon-reload
          - systemctl restart containerd
          # -- Additional commands to execute on control plane after kubeadm join/init
          postKubeadmAdditionalCommands: []
          # -- Directory containing kubeadm patches on target vms
          patchesDirectory: ""
        workers:
          # -- files to create on the workers instances
          files: []
          # -- Additional commands to execute on workers before kubeadm join/init
          preKubeadmAdditionalCommands:
          - update-ca-certificates
          - systemctl daemon-reload
          - systemctl restart containerd
          # -- Additional commands to execute on workers after kubeadm join/init
          postKubeadmAdditionalCommands: []


    # Vsphere VMs configuration
    machines:
      # -- Use dhcp for ipv4 configuration
      dhcp4: true
      # -- Nameservers for VMs DNS resolution
      nameServers: []
      # -- Search domains suffixes to configure on VMs
      searchDomains: []
      # -- VM network domain
      domain: ""
      # -- IPv4 gateway
      gateway: ""

      # -- users to create on machines
      # see https://github.com/kubernetes-sigs/cluster-api/blob/main/bootstrap/kubeadm/api/v1beta1/kubeadmconfig_types.go#L257 for documentation about user config object
      users:
      - name: capv
        sshAuthorizedKeys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCYRPmZhxlSupurhZ05umzLUboeHk0na0BuzQdSxzbK6xedQJDeluJD9+CoUDPcj2pd+RVWuGNdBxjzNvshdyuwYuopxyC5aI37AHqYRLYidKQn+fGgiT153CAzuZv6l/+k9xoTE9fGsvcluzYbpFc3WRlnzaKAupiAkhKcWpt0sdBAXL0BPEaCTRsAykDzlbH/Bro24JCW6/IiCUuUtI1LBhw2sdODFlnZpJA2BmgY5++TiIAU4URQPQFz2vuFScAUppmibKkOccp8Yn5bAjXUFgwomcEbO/OiX6PhGlHEHR5ea8th4/tPPpYAWT5NszmYjS2J+LzmJAnrKcQKYzDpGF9nCmhEEMdaVJlSoei3vo/asvlXTCn3yb/tShCOIKcz+C0YtTix4RuhikQuNNXJXoJQNP3bT4rCSHfRQ52+DuNhuoYS15Z4S3ngPLN5ryRZFRnui7qpv7y801f6nsNd6lzuhq1RvfKyjNy+N0bRcw7kt8zTyIOmXnTQ9Be9hNU=
          tilab@tim-jump-host
        sudo: ALL=(ALL) NOPASSWD:ALL


      # Control plane VMs configuration
      controlPlane:
        # -- Control plane VsphereMachineTemplate annotations
        annotations: {}
        # -- Number of control plane VMs instances
        replicas: 1
        # -- kube-vip version
        kubeVipVersion: v0.4.2
        # -- ipaddrs passed to capi if necessary
        ipAddrs: []
        # -- Path of the CRI socket to use
        criSocket: "/var/run/containerd/containerd.sock"
        # -- Control plane VSphere resource pool
        resourcePool: MGMT/Resources
        # -- Control plane VSphere machine template to clone, must contain kubeadm at the same version as specified in kubernetes.version
        template: ${MACHINE_IMAGE}
        # -- Control plane VSphere folder to store VM
        folder: k8s training
        # -- Control plane VSphere storage policy name to use for disks
        storagePolicy: ""
        # -- Control plane VSphere datastore to create/locate machine
        dataStore: vsanDatastore
        # -- Control plane Number of vCPUs to allocate to controlPlane instances
        cpuCount: 2
        # -- Control plane Disk size of VM in GiB
        diskSizeGiB: 25
        # -- Control plane Memory to allocate to controlPlane VMs
        memorySizeMiB: 8192
        # -- Additional kubelet command line arguments for join configurations
        kubeletExtraArgs: {}
        # -- Node drain timeout is the total amount of time that the controller will spend on draining a node
        nodeDrainTimeout: ""
        machineHealthCheck:
          # -- Deploys a machineHealthCheck object for the controlPlane
          enabled: false
          # -- Any further remediation is only allowed if at most "MaxUnhealthy" machines are not healthy
          maxUnhealthy: 100%
          # -- Machines older than this duration without a node will be considered to have failed and will be remediated
          nodeStartupTimeout: ""
          # -- list of the conditions that determine whether a node is considered unhealthy. if any of the conditions is met, the node is unhealthy.
          unhealthyConditions:
            - type: Ready
              status: Unknown
              timeout: 300s
            - type: Ready
              status: "False"
              timeout: 300s
          # -- remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange"
          unhealthyRange: ""

      # -- Worker pools, more details on its configuration in [Worker pools configuration](#worker-pools-configuration)
      workers:
        # -- Name of the standard worker pool, you can define as many others pools as required
        worker-md-0:
          # -- Number of worker VMs instances
          replicas: 2
          # -- MachineDeployment annotations
          machineDeploymentAnnotations: {}
          # -- Labels to add to the machines created by the machineDeployment
          machinesLabels: {}
          # -- Labels to add to the machineDeployment selector to match the machines
          machinesSelectors: {}
          # -- workers VsphereMachineTemplate annotations
          annotations: {}
          # -- ipaddrs passed to capi if necessary
          ipAddrs: []
          # -- Path of the CRI socket to use
          criSocket: "/var/run/containerd/containerd.sock"
          # -- workers VSphere resource pool
          resourcePool: MGMT/Resources
          # -- workers VSphere machine template to clone, must contain kubeadm at the same version as specified in kubernetes.version
          template: ${MACHINE_IMAGE}
          # -- workers VSphere folder to store VM
          folder: k8s training
          # -- workers VSphere storage policy name to use for disks
          storagePolicy: ""
          # -- workers VSphere datastore to create/locate machine
          dataStore: vsanDatastore
          # -- Number of vCPUs to allocate to worker instances
          cpuCount: 2
          # -- disk size of workers VM in GiB
          diskSizeGiB: 25
          # -- Memory to allocate to worker VMs
          memorySizeMiB: 8192
          # -- files to create on the workers instances of this pool
          files:
          - content: |
              [Service]
              Environment='HTTP_PROXY=${http_proxy}'
              Environment='HTTPS_PROXY=${https_proxy}'
              Environment='http_proxy=${http_proxy}''
              Environment='https_proxy=${https_proxy}'
              Environment='NO_PROXY=${no_proxy}'
              Environment='no_proxy=${no_proxy}'
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
          - content: |
              Acquire {
                HTTP::proxy ${http_proxy};
                HTTPS::proxy ${http_proxy};
              }
            path: /etc/apt/apt.conf.d/proxy.conf
          - path: "/usr/local/share/ca-certificates/163.162.95.108.crt"
            content: |
              -----BEGIN CERTIFICATE-----
              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
              /M/KbKXgNbf5SeT7lKjflw==
              -----END CERTIFICATE-----
          # -- Additional commands to execute on workers before kubeadm join/init on this pool
          preKubeadmAdditionalCommands: []
          # -- Additional kubelet command line arguments for join configurations
          kubeletExtraArgs: {}
          # -- Node drain timeout is the total amount of time that the controller will spend on draining a node
          nodeDrainTimeout: ""
          machineHealthCheck:
            # -- Deploys a machineHealthCheck object for the workerPool
            enabled: false
            # -- Any further remediation is only allowed if at most "MaxUnhealthy" machines are not healthy
            maxUnhealthy: ""
            # -- Machines older than this duration without a node will be considered to have failed and will be remediated
            nodeStartupTimeout: ""
            # -- list of the conditions that determine whether a node is considered unhealthy. if any of the conditions is met, the node is unhealthy.
            unhealthyConditions:
            - type: Ready
              status: Unknown
              timeout: 300s
            - type: Ready
              status: "False"
              timeout: 300s
            # -- remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange"
            unhealthyRange: ""


    # Vsphere common configuration
    vsphere:
      # -- Datacenter to use
      dataCenter: ${VS_DC_NAME}
      # -- VSphere network for VMs and CSI
      network: ${VS_NETWORK}
      # -- Vsphere username
      username: ${VS_USERNAME}
      # -- VSphere password
      password: ${VS_PASSWORD}
      # -- VSphere server dns name
      server: ${VS_SERVER}
      # -- VSphere https TLS thumbprint
      tlsThumbprint: ${VS_TLS_THUMBPRINT}



    vsphereCsi:
      # -- Installs vsphere-csi on the cluster
      enabled: true

      cloudControllerManager:
        # -- resources of vsphere-cloud-controller-manager
        resources:
          requests:
            cpu: 200m

      controller:
        csiAttacher:
          # -- resources of the container csi-attacher in vsphere-csi-controller
          resources: {}
          #
    #    csiResizer:
    #      # -- resources of the container csi-resizer in vsphere-csi-controller
    #      resources: {}
    #      #
        vsphereCsiController:
          # -- resources of the container vsphere-csi-controller in vsphere-csi-controller
          resources: {}
          #
        vsphereSyncer:
          # -- resources of the container vsphere-syncer in vsphere-csi-controller
          resources: {}
          #
        csiProvisioner:
          # -- resources of the container csi-provisioner in vsphere-csi-controller
          resources: {}
          #
    #    csiSnapshotter:
    #      # -- resources of the container csi-snapshotter in vsphere-csi-controller
    #      resources: {}
    #      #
        livenessProbe:
          # -- resources of the container liveness-probe in vsphere-csi-controller
          resources: {}
          #

      node:
        nodeDriverRegistrar:
          # -- resources of the container node-driver-registrar in vsphere-csi-node
          resources: {}
        vsphereCsiNode:
          # -- resources of the container vsphere-csi-node in vsphere-csi-node
          resources: {}
        livenessProbe:
          # -- resources of the container liveness-probe in vsphere-csi-node
          resources: {}

    # Storage class configuration
    storageClass:
      # -- Create storage class
      enabled: true
      # -- Storage class name
      name: "default"
      # -- Define storage class as default class
      default: true
      # -- Storage class reclaimPolicy
      reclaimPolicy: "Delete"
      # -- Storage class fsType
      fsType: ext4
      # -- VSphere Storage policy
      storagePolicy: ""

    cni:
      calico:
        # -- Installs cni calico on the cluster
        enabled: false
