apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: cluster-root-secret
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/title: Generate the Root account password for a cluster
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/category: Multi-Tenancy
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: cluster-root-secret
    policies.kyverno.io/description: >-
      This policy injects objects to manage the password of the Root account per target cluster.
      It generates RandomSecret in Vault and also related ESO.

spec:
  generateExisting: true
  rules:
    - name: cluster-root-secret-randomsecret
      match:
        any:
          - resources:
              kinds:
                - cluster.x-k8s.io/v1beta1/Machine
      generate:
        synchronize: true
        apiVersion: redhatcop.redhat.io/v1alpha1
        kind: RandomSecret
        name: "cluster-root-secret"
        namespace: "{{request.object.metadata.namespace}}"
        data:
          spec:
            connection:
              tLSConfig:
                skipVerify: true  # not cool but refering tlsSecret does not work in release v0.8.13 - see https://gitlab.com/sylva-projects/sylva-core/-/issues/261
                #  name: vault-tls
              address: https://vault.vault.svc.cluster.local:8200
            authentication:
              path: kubernetes
              role: "cluster-secret-writer-{{request.object.metadata.namespace}}"
              serviceAccount:
                name: vault
            isKVSecretsEngineV2: true
            path: "secret/data/{{request.object.metadata.namespace}}"
            secretKey: password
            secretFormat:
              passwordPolicyName: sylva-password-policy
            #refreshPeriod: 720h
            refreshPeriod: 1h
    - name: cluster-root-secret-externalsecret
      match:
        any:
          - resources:
              kinds:
                - cluster.x-k8s.io/v1beta1/Machine
      generate:
        synchronize: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        name: "cluster-root-secret"
        namespace: "{{request.object.metadata.namespace}}"
        data:
          metadata:
            name: "cluster-root-secret"
            namespace: "{{request.object.metadata.namespace}}"
          spec:
            secretStoreRef:
              name: vault
              kind: ClusterSecretStore
            refreshInterval: 0s
            target:
              creationPolicy: Orphan
              name: cluster-root-secret
            data:
              - secretKey: password
                remoteRef:
                  key: "secret/data/{{request.object.metadata.namespace}}/cluster-root-secret"
                  property: password
