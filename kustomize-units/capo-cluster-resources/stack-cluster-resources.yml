---
apiVersion: heatoperator.sylva/v1
kind: HeatStack
metadata:
  labels:
    app.kubernetes.io/name: heatstack
    app.kubernetes.io/instance: heatstack-capo-cluster-resources
    app.kubernetes.io/part-of: heat-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: heat-operator
  name: heatstack-capo-cluster-resources
  namespace: default
spec:
  heatStack:
    namePrefix: "${STACK_NAME_PREFIX}"
    tag: ${CAPO_TAG}
    template:
      heat_template_version: "2018-08-31"

      parameters:
        network:
          type: string
          description: "Network name"
        control_plane_affinity_policy:
          type: string
          description: "Control plane affinity policy"
        worker_affinity_policy:
          type: string
          description: "Worker affinity policy"
        control_plane_security_group_name:
          type: string
          description: "Control plane security group name"
        worker_security_group_name:
          type: string
          description: "Worker security group name"
        control_plane_rules:
          type: json
          description: "Security group rules associated with the control plane VMs"
          default:
            direction: [ingress, ingress, ingress, ingress]
            port: ['80', '443', '22', '53']
            protocol: [tcp, tcp, tcp, udp]
            remote_ip_prefix: [0.0.0.0/0, 0.0.0.0/0, 0.0.0.0/0, 0.0.0.0/0]
        worker_rules:
          type: json
          description: "Security group rules associated with worker VMs"
          default:
            direction: [ingress, ingress, ingress, ingress]
            port: ['80', '443', '22', '53']
            protocol: [tcp, tcp, tcp, udp]
            remote_ip_prefix: [0.0.0.0/0, 0.0.0.0/0, 0.0.0.0/0, 0.0.0.0/0]
        create_ironic_security_group:
          type: boolean
          description: "Whenever security-group-worker-ironicmust be created"
          default: false
        worker_rules_ironic:
          type: json
          description: "Security group rules associated with worker VMs for Ironic"
          default:
            direction: [ingress, ingress, ingress, ingress]
            port: ['5050', '6180', '6385', '9999']
            protocol: [tcp, tcp, tcp, tcp]
            remote_ip_prefix: [0.0.0.0/0, 0.0.0.0/0, 0.0.0.0/0, 0.0.0.0/0]

      resources:
        port:
          type: OS::Neutron::Port
          properties:
            network: { get_param: network }
        srvgroup-ctrl-plane:
          type: OS::Nova::ServerGroup
          properties:
            policies:
              - get_param: control_plane_affinity_policy
        srvgroup-worker:
          type: OS::Nova::ServerGroup
          properties:
            policies:
              - get_param: worker_affinity_policy
        security-group-ctrl-plane:
          type: OS::Neutron::SecurityGroup
          properties:
            description: "Heat Stack managed security group for control plane VMs"
            name: { get_param: control_plane_security_group_name }
            rules:
              repeat:
                for_each:
                  <%direction%>: { get_param: [control_plane_rules, direction] }
                  <%port%>: { get_param: [control_plane_rules, port] }
                  <%protocol%>: { get_param: [control_plane_rules, protocol] }
                  <%remote_ip_prefix%>: { get_param: [control_plane_rules, remote_ip_prefix] }
                template:
                  protocol: <%protocol%>
                  port_range_min: <%port%>
                  port_range_max: <%port%>
                  remote_ip_prefix: <%remote_ip_prefix%>
                  direction: <%direction%>
                permutations: false
        security-group-worker:
          type: OS::Neutron::SecurityGroup
          properties:
            description: "Heat Stack managed security group for worker VMs"
            name: { get_param: worker_security_group_name }
            rules:
              repeat:
                for_each:
                  <%direction%>: { get_param: [worker_rules, direction] }
                  <%port%>: { get_param: [worker_rules, port] }
                  <%protocol%>: { get_param: [worker_rules, protocol] }
                  <%remote_ip_prefix%>: { get_param: [worker_rules, remote_ip_prefix] }
                template:
                  protocol: <%protocol%>
                  port_range_min: <%port%>
                  port_range_max: <%port%>
                  remote_ip_prefix: <%remote_ip_prefix%>
                  direction: <%direction%>
                permutations: false
        security-group-worker-ironic:
          type: OS::Neutron::SecurityGroup
          condition: { get_param: create_ironic_security_group }
          properties:
            description: "Heat Stack managed security group for worker VMs allowing Ironic access"
            name:
              list_join: ['-', [ {get_param: worker_security_group_name}, 'ironic']]
            rules:
              repeat:
                for_each:
                  <%direction%>: { get_param: [worker_rules_ironic, direction] }
                  <%port%>: { get_param: [worker_rules_ironic, port] }
                  <%protocol%>: { get_param: [worker_rules_ironic, protocol] }
                  <%remote_ip_prefix%>: { get_param: [worker_rules_ironic, remote_ip_prefix] }
                template:
                  protocol: <%protocol%>
                  port_range_min: <%port%>
                  port_range_max: <%port%>
                  remote_ip_prefix: <%remote_ip_prefix%>
                  direction: <%direction%>
                permutations: false
      outputs:
        allocated_ip:
          value: { get_attr: [port, fixed_ips, 0, ip_address] }
          description: IP address allocated to the port
        allocated_fip:
          value: ""
        control_plane_servergroup_id:
          value: { get_resource: srvgroup-ctrl-plane }
          description: Control plane server group ID
        worker_servergroup_id:
          value: { get_resource: srvgroup-worker }
          description: Control plane server group ID

    environment:
      parameters:
        network: "${CAPO_NETWORK_ID}"
        control_plane_affinity_policy: "${CONTROL_PLANE_AFFINITY_POLICY}"
        worker_affinity_policy: "${WORKER_AFFINITY_POLICY}"
        control_plane_security_group_name: "${CONTROL_PLANE_SECURITY_GROUP_NAME}"
        worker_security_group_name: "${WORKER_SECURITY_GROUP_NAME}"
        create_ironic_security_group: ${CAPO_CREATE_IRONIC_SECURITY_GROUP}
  outputConfigMap:
    name: capo-cluster-resources
    labels:
      copy-from-bootstrap-to-management: ""
  identityRef: management-cluster-cloud-config
  cloudName: capo_cloud
