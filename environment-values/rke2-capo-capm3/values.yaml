# This example environment values files will let you build
# a Sylva CAPO mgmt cluster (inheriting from ../rke2-capo)
# plus a Metal3 workload cluster with 1 control node and 1 worker node

cluster:
  capi_providers:
    infra_provider: capo
    bootstrap_provider: cabpr
  capo:
    image_name: "Ubuntu 22.04 Pack" # image name used to create mgmt cluster on OpenStack
    ssh_key_name: # put the name of your nova SSH keypair here
    network_id: # the network id is provided by remote target unit if Kustomize remote target is used, but can be overwritten
    flavor_name: # put the name of the flavor from OpenStack
    rootVolume:
      diskSize: 100
      volumeType: ceph_sas

  control_plane_replicas: 3

  # machine_deployments:
  #   md0:
  #     replicas: 1
  #     capo:
  #       failure_domain: region0

openstack:
  ## If cinder CSI is used, provide a name for the storage class and the storage type from OpenStack
  storageClass:
    name: "cinder-ceph-ssd"
    type: "ceph_ssd"

units:

  capm3:
    enabled: true

  workload-cluster:
    enabled: true
    helmrelease_spec:
      values:

        cluster_external_ip: 10.188.36.149

        cluster:
          capi_providers:
            infra_provider: capm3
            bootstrap_provider: cabpr
          control_plane_replicas: 1

          rke2:
            additionalUserData:
              config: # String to allows users to specify additional cloud-init configuration
                users:
                  - name: ubuntu
                    groups: users
                    sudo: ALL=(ALL) NOPASSWD:ALL
                    shell: /bin/bash
                    lock_passwd: false
                    passwd: "put your password hash here" # (copy pasted from /etc/shadow or created with "mkpasswd" --method=SHA-512 --stdin")
                    ssh_authorized_keys:
                      - ssh-rsa AAAA...... YOUR KEY HERE ....UqnQ==

          capm3:
            machine_image_url: http://{{ .Values.display_external_ip }}/ubuntu-22.04-plain.qcow2
            machine_image_format: qcow2
            machine_image_checksum: http://{{ .Values.display_external_ip }}/ubuntu-22.04-plain.qcow2.sha256sum
            machine_image_checksum_type: sha256
            public_pool_name: "public-pool"
            public_pool_network: 10.188.36.128
            public_pool_gateway: 10.188.36.129
            public_pool_start: 10.188.36.148
            public_pool_end: 10.188.36.148
            public_pool_prefix: "26"
            provisioning_pool_name: "provisioning-pool"
            provisioning_pool_network: 10.199.39.192
            provisioning_pool_gateway: 10.199.39.193
            provisioning_pool_start: 10.199.39.219
            provisioning_pool_end: 10.199.39.219
            provisioning_pool_prefix: "27"
            dns_server: 1.2.3.4

          control_plane:   # tweak network configuration as needed ...
            capm3:
              provisioning_pool_interface: bond0
              public_pool_interface: bond0.13

            network_interfaces:
              # for CAPM3 folowing are used and mapped to Metal3Data.spec.template.spec.networkData.links
              bond0:
                # bond_mode can be one of balance-rr, active-backup, balance-xor, broadcast, balance-tlb, balance-alb, 802.3ad
                # https://github.com/metal3-io/cluster-api-provider-metal3/blob/main/api/v1alpha5/metal3datatemplate_types.go#L201-L202
                bond_mode: 802.3ad
                interfaces:
                  - ens1f0
                  - ens1f1
                vlans:
                  - id: 13
              ens1f0:
                type: phy
              ens1f1:
                type: phy

          machine_deployment_default: # tweak as needed ...
            capm3:
              provisioning_pool_interface: bond0
              public_pool_interface: bond0.13

          machine_deployments:
            md0:
              infra_provider: capm3
              replicas: 2
              capm3:
                hostSelector:
                  matchLabels:
                    cluster-role: worker # tweak as needed must match cluster-role defined in baremetal_hosts
              network_interfaces: # tweak network configuration as needed ...
                bond0:
                  bond_mode: 802.3ad
                  interfaces:
                    - ens1f0
                    - ens1f1
                  vlans:
                    - id: 13
                ens1f0:
                  type: phy
                ens1f1:
                  type: phy

          baremetal_hosts:
            # this example is based on what worked on an HP Proliant DL360 Gen10
            my-server:  # corresponding credentials need to be set in secrets.yaml
              bmh_metadata:
                labels:
                  cluster-role: control-plane
                  longhorn: "true"
                annotations:
                  disk: /dev/sdb # this disk will be mounted on the K8S node in a dedicated directory and used by Longhorn
              bmh_spec:
                description: Downstream dev clusters
                online: true
                externallyProvisioned: false
                bmc:
                  address: redfish-virtualmedia://66.66.66.66/redfish/v1/Systems/1   # put the real BMC address here!
                  disableCertificateVerification: true
                automatedCleaningMode: metadata
                bootMACAddress: ba:ad:00:c0:ff:ee    # put the real address here!
                bootMode: legacy
                rootDeviceHints:
                  hctl: 2:1:0:0   # tweak as needed
            my-server2:  # corresponding credentials need to be set in secrets.yaml
              bmh_metadata:
                labels:
                  cluster-role: worker
                  longhorn: "true"
                annotations:
                  disk: /dev/sdb # this disk will be mounted on the K8S node in a dedicated directory and used by Longhorn
              bmh_spec:
                description: Downstream dev clusters
                online: true
                externallyProvisioned: false
                bmc:
                  address: redfish-virtualmedia://66.66.66.67/redfish/v1/Systems/1   # put the real BMC address here ()
                  disableCertificateVerification: true
                automatedCleaningMode: metadata
                bootMACAddress: ba:ad:00:c0:ff:ef    # put the real address here!
                bootMode: legacy
                rootDeviceHints:
                  hctl: 2:1:0:0   # tweak as needed

        units:
          longhorn:
            enabled: true

proxies:
  # put your own proxy settings here if you need
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""

# configure containerd registry mirrors following https://github.com/containerd/containerd/blob/main/docs/hosts.md
# see charts/syla-units/values.yaml for a more detailled example
# registry_mirrors:
#   hosts_config:
#     docker.io:
#     - mirror_url: http://your.mirror/docker

# add ntp servers if you need
ntp:
  enabled: false
  servers:
  # - 1.2.3.4
  # - 1.2.3.5

